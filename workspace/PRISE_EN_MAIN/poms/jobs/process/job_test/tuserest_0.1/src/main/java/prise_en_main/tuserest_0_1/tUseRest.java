// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package prise_en_main.tuserest_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: tUseRest Purpose: utilisation du composant Rest<br>
 * Description: utilisation du composant Rest <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class tUseRest implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "tUseRest";
	private final String projectName = "PRISE_EN_MAIN";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					tUseRest.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(tUseRest.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRESTClient_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRESTClient_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_PRISE_EN_MAIN_tUseRest = new byte[0];
		static byte[] commonByteArray_PRISE_EN_MAIN_tUseRest = new byte[0];

		public Integer id;

		public Integer getId() {
			return this.id;
		}

		public String name;

		public String getName() {
			return this.name;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public String addressStreet;

		public String getAddressStreet() {
			return this.addressStreet;
		}

		public String addressSuite;

		public String getAddressSuite() {
			return this.addressSuite;
		}

		public String addressCity;

		public String getAddressCity() {
			return this.addressCity;
		}

		public String addressZipecode;

		public String getAddressZipecode() {
			return this.addressZipecode;
		}

		public String adresseGeo;

		public String getAdresseGeo() {
			return this.adresseGeo;
		}

		public String adresseGeoLat;

		public String getAdresseGeoLat() {
			return this.adresseGeoLat;
		}

		public String addressGeoLng;

		public String getAddressGeoLng() {
			return this.addressGeoLng;
		}

		public String phone;

		public String getPhone() {
			return this.phone;
		}

		public String website;

		public String getWebsite() {
			return this.website;
		}

		public String companyName;

		public String getCompanyName() {
			return this.companyName;
		}

		public String companyPhrase;

		public String getCompanyPhrase() {
			return this.companyPhrase;
		}

		public String companyBs;

		public String getCompanyBs() {
			return this.companyBs;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRISE_EN_MAIN_tUseRest.length) {
					if (length < 1024 && commonByteArray_PRISE_EN_MAIN_tUseRest.length == 0) {
						commonByteArray_PRISE_EN_MAIN_tUseRest = new byte[1024];
					} else {
						commonByteArray_PRISE_EN_MAIN_tUseRest = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRISE_EN_MAIN_tUseRest, 0, length);
				strReturn = new String(commonByteArray_PRISE_EN_MAIN_tUseRest, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRISE_EN_MAIN_tUseRest) {

				try {

					int length = 0;

					this.id = readInteger(dis);

					this.name = readString(dis);

					this.username = readString(dis);

					this.email = readString(dis);

					this.addressStreet = readString(dis);

					this.addressSuite = readString(dis);

					this.addressCity = readString(dis);

					this.addressZipecode = readString(dis);

					this.adresseGeo = readString(dis);

					this.adresseGeoLat = readString(dis);

					this.addressGeoLng = readString(dis);

					this.phone = readString(dis);

					this.website = readString(dis);

					this.companyName = readString(dis);

					this.companyPhrase = readString(dis);

					this.companyBs = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.id, dos);

				// String

				writeString(this.name, dos);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.email, dos);

				// String

				writeString(this.addressStreet, dos);

				// String

				writeString(this.addressSuite, dos);

				// String

				writeString(this.addressCity, dos);

				// String

				writeString(this.addressZipecode, dos);

				// String

				writeString(this.adresseGeo, dos);

				// String

				writeString(this.adresseGeoLat, dos);

				// String

				writeString(this.addressGeoLng, dos);

				// String

				writeString(this.phone, dos);

				// String

				writeString(this.website, dos);

				// String

				writeString(this.companyName, dos);

				// String

				writeString(this.companyPhrase, dos);

				// String

				writeString(this.companyBs, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",name=" + name);
			sb.append(",username=" + username);
			sb.append(",email=" + email);
			sb.append(",addressStreet=" + addressStreet);
			sb.append(",addressSuite=" + addressSuite);
			sb.append(",addressCity=" + addressCity);
			sb.append(",addressZipecode=" + addressZipecode);
			sb.append(",adresseGeo=" + adresseGeo);
			sb.append(",adresseGeoLat=" + adresseGeoLat);
			sb.append(",addressGeoLng=" + addressGeoLng);
			sb.append(",phone=" + phone);
			sb.append(",website=" + website);
			sb.append(",companyName=" + companyName);
			sb.append(",companyPhrase=" + companyPhrase);
			sb.append(",companyBs=" + companyBs);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PRISE_EN_MAIN_tUseRest = new byte[0];
		static byte[] commonByteArray_PRISE_EN_MAIN_tUseRest = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PRISE_EN_MAIN_tUseRest.length) {
					if (length < 1024 && commonByteArray_PRISE_EN_MAIN_tUseRest.length == 0) {
						commonByteArray_PRISE_EN_MAIN_tUseRest = new byte[1024];
					} else {
						commonByteArray_PRISE_EN_MAIN_tUseRest = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PRISE_EN_MAIN_tUseRest, 0, length);
				strReturn = new String(commonByteArray_PRISE_EN_MAIN_tUseRest, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PRISE_EN_MAIN_tUseRest) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRESTClient_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[16];

					public void addRow(String[] row) {

						for (int i = 0; i < 16; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 15 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 15 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|%13$-");
							sbformat.append(colLengths[12]);
							sbformat.append("s");

							sbformat.append("|%14$-");
							sbformat.append(colLengths[13]);
							sbformat.append("s");

							sbformat.append("|%15$-");
							sbformat.append(colLengths[14]);
							sbformat.append("s");

							sbformat.append("|%16$-");
							sbformat.append(colLengths[15]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[15] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("tLogRow_3");
				util_tLogRow_3.addRow(new String[] { "id", "name", "username", "email", "addressStreet", "addressSuite",
						"addressCity", "addressZipecode", "adresseGeo", "adresseGeoLat", "addressGeoLng", "phone",
						"website", "companyName", "companyPhrase", "companyBs", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tExtractJSONFields_1 begin ] start
				 */

				ok_Hash.put("tExtractJSONFields_1", false);
				start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				currentComponent = "tExtractJSONFields_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tExtractJSONFields_1 = 0;

				int nb_line_tExtractJSONFields_1 = 0;
				String jsonStr_tExtractJSONFields_1 = "";

				class JsonPathCache_tExtractJSONFields_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

				/**
				 * [tExtractJSONFields_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 begin ] start
				 */

				ok_Hash.put("tRESTClient_1", false);
				start_Hash.put("tRESTClient_1", System.currentTimeMillis());

				currentComponent = "tRESTClient_1";

				int tos_count_tRESTClient_1 = 0;

				/**
				 * [tRESTClient_1 begin ] stop
				 */

				/**
				 * [tRESTClient_1 main ] start
				 */

				currentComponent = "tRESTClient_1";

				row3 = null;

// expected response body
				Object responseDoc_tRESTClient_1 = null;

				try {
					// request body
					org.dom4j.Document requestDoc_tRESTClient_1 = null;
					String requestString_tRESTClient_1 = null;

					Object requestBody_tRESTClient_1 = requestDoc_tRESTClient_1 != null ? requestDoc_tRESTClient_1
							: requestString_tRESTClient_1;

					// resposne class name
					Class<?> responseClass_tRESTClient_1 = String.class;

					// create web client instance
					org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

					boolean inOSGi = routines.system.BundleUtils.inOSGi();

					final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_1 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

					String url = "https://jsonplaceholder.typicode.com/";
					// {baseUri}tRESTClient
					factoryBean_tRESTClient_1.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
					factoryBean_tRESTClient_1.setAddress(url);

					factoryBean_tRESTClient_1.setFeatures(features_tRESTClient_1);

					java.util.List<Object> providers_tRESTClient_1 = new java.util.ArrayList<Object>();
					providers_tRESTClient_1.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
						// workaround for https://jira.talendforge.org/browse/TESB-7276
						public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls, java.lang.reflect.Type type,
								java.lang.annotation.Annotation[] anns, javax.ws.rs.core.MediaType mt,
								javax.ws.rs.core.MultivaluedMap<String, String> headers, java.io.InputStream is)
								throws IOException, javax.ws.rs.WebApplicationException {
							String contentLength = headers.getFirst("Content-Length");
							if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
									&& Integer.valueOf(contentLength) <= 0) {
								try {
									return org.dom4j.DocumentHelper.parseText("<root/>");
								} catch (org.dom4j.DocumentException e_tRESTClient_1) {
									e_tRESTClient_1.printStackTrace();
								}
								return null;
							}
							return super.readFrom(cls, type, anns, mt, headers, is);
						}
					});
					org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_1 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
					jsonProvider_tRESTClient_1.setIgnoreNamespaces(true);
					jsonProvider_tRESTClient_1.setAttributesToElements(true);

					jsonProvider_tRESTClient_1.setSupportUnwrapped(true);
					jsonProvider_tRESTClient_1.setWrapperName("root");

					jsonProvider_tRESTClient_1.setDropRootElement(false);
					jsonProvider_tRESTClient_1.setConvertTypesToStrings(false);
					providers_tRESTClient_1.add(jsonProvider_tRESTClient_1);
					factoryBean_tRESTClient_1.setProviders(providers_tRESTClient_1);
					factoryBean_tRESTClient_1.setTransportId("http://cxf.apache.org/transports/http");

					boolean use_auth_tRESTClient_1 = false;

					org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_1 = factoryBean_tRESTClient_1
							.createWebClient();

					// set request path
					webClient_tRESTClient_1.path("users");

					// set connection properties
					org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_1 = org.apache.cxf.jaxrs.client.WebClient
							.getConfig(webClient_tRESTClient_1);
					org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_1 = clientConfig_tRESTClient_1
							.getHttpConduit();

					if (clientConfig_tRESTClient_1.getEndpoint() != null
							&& clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo() != null) {
						clientConfig_tRESTClient_1.getEndpoint().getEndpointInfo()
								.setProperty("enable.webclient.operation.reporting", true);
					}

					if (!inOSGi) {
						conduit_tRESTClient_1.getClient().setReceiveTimeout((long) (60 * 1000L));
						conduit_tRESTClient_1.getClient().setConnectionTimeout((long) (30 * 1000L));
						boolean use_proxy_tRESTClient_1 = false;

					}

					// set Accept-Type
					webClient_tRESTClient_1.accept("application/json");

					// set optional query and header properties if any

					if (use_auth_tRESTClient_1 && "OAUTH2_BEARER".equals("BASIC")) {
						// set oAuth2 bearer token
						webClient_tRESTClient_1.header("Authorization", "Bearer " + "");
					}

					// if FORM request then capture query parameters into Form, otherwise set them
					// as queries

					try {
						// start send request

						responseDoc_tRESTClient_1 = webClient_tRESTClient_1.get(responseClass_tRESTClient_1);

						int webClientResponseStatus_tRESTClient_1 = webClient_tRESTClient_1.getResponse().getStatus();
						if (webClientResponseStatus_tRESTClient_1 >= 300) {
							throw new javax.ws.rs.WebApplicationException(webClient_tRESTClient_1.getResponse());
						}

						if (row3 == null) {
							row3 = new row3Struct();
						}

						row3.statusCode = webClientResponseStatus_tRESTClient_1;

						{
							Object responseObj_tRESTClient_1 = responseDoc_tRESTClient_1;

							if (responseObj_tRESTClient_1 != null) {
								if (responseClass_tRESTClient_1 == String.class) {
									row3.string = (String) responseObj_tRESTClient_1;
								} else {
									routines.system.Document responseTalendDoc_tRESTClient_1 = null;
									if (null != responseObj_tRESTClient_1) {
										responseTalendDoc_tRESTClient_1 = new routines.system.Document();
										responseTalendDoc_tRESTClient_1
												.setDocument((org.dom4j.Document) responseObj_tRESTClient_1);
									}
									row3.body = responseTalendDoc_tRESTClient_1;
								}
							}
						}

						globalMap.put("tRESTClient_1_HEADERS", webClient_tRESTClient_1.getResponse().getHeaders());

					} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_1) {

						throw ex_tRESTClient_1;

					}

				} catch (Exception e_tRESTClient_1) {

					throw new TalendException(e_tRESTClient_1, currentComponent, globalMap);

				}

				tos_count_tRESTClient_1++;

				/**
				 * [tRESTClient_1 main ] stop
				 */

				/**
				 * [tRESTClient_1 process_data_begin ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_begin ] stop
				 */
// Start of branch "row3"
				if (row3 != null) {

					/**
					 * [tExtractJSONFields_1 main ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
					}

					if (row3.string != null) {// C_01
						jsonStr_tExtractJSONFields_1 = row3.string.toString();

						row4 = null;

						String loopPath_tExtractJSONFields_1 = "$.*";
						java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

						boolean isStructError_tExtractJSONFields_1 = true;
						com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
						try {
							document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
									.parse(jsonStr_tExtractJSONFields_1);
							com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
									.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
							Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1
									.read(compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
							if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
								resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
							} else {
								resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
							}

							isStructError_tExtractJSONFields_1 = false;
						} catch (java.lang.Exception ex_tExtractJSONFields_1) {
							throw (ex_tExtractJSONFields_1);
						}

						String jsonPath_tExtractJSONFields_1 = null;
						com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

						Object value_tExtractJSONFields_1 = null;

						Object root_tExtractJSONFields_1 = null;
						for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
								|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
										.size()); i_tExtractJSONFields_1++) {
							if (!isStructError_tExtractJSONFields_1) {
								Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
										.get(i_tExtractJSONFields_1);
								row4 = null;
								row4 = new row4Struct();
								nb_line_tExtractJSONFields_1++;
								try {
									jsonPath_tExtractJSONFields_1 = "id";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										if (value_tExtractJSONFields_1 != null
												&& !value_tExtractJSONFields_1.toString().isEmpty()) {
											row4.id = ParserUtils
													.parseTo_Integer(value_tExtractJSONFields_1.toString());
										} else {
											row4.id =

													null

											;
										}
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.id =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "name";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.name = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.name =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "username";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.username = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.username =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "email";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.email = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.email =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "address.street";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.addressStreet = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.addressStreet =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "address.suite";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.addressSuite = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.addressSuite =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "address.city";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.addressCity = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.addressCity =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "address.zipcode";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.addressZipecode = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.addressZipecode =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "address.geo";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.adresseGeo = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.adresseGeo =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "adress.geo_lat";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.adresseGeoLat = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.adresseGeoLat =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "adress.geo_lng";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.addressGeoLng = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.addressGeoLng =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "phone";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.phone = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.phone =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "website";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.website = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.website =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "company.name";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.companyName = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.companyName =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "company.catchPhrase";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.companyPhrase = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.companyPhrase =

												null

										;
									}
									jsonPath_tExtractJSONFields_1 = "company.bs";
									compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

									try {

										value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
												.read(row_tExtractJSONFields_1);

										row4.companyBs = value_tExtractJSONFields_1 == null ?

												null

												: value_tExtractJSONFields_1.toString();
									} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
										row4.companyBs =

												null

										;
									}
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									throw (ex_tExtractJSONFields_1);
								}

							}

							isStructError_tExtractJSONFields_1 = false;

//}

							tos_count_tExtractJSONFields_1++;

							/**
							 * [tExtractJSONFields_1 main ] stop
							 */

							/**
							 * [tExtractJSONFields_1 process_data_begin ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tLogRow_3 main ] start
								 */

								currentComponent = "tLogRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
								}

///////////////////////		

								String[] row_tLogRow_3 = new String[16];

								if (row4.id != null) { //
									row_tLogRow_3[0] = String.valueOf(row4.id);

								} //

								if (row4.name != null) { //
									row_tLogRow_3[1] = String.valueOf(row4.name);

								} //

								if (row4.username != null) { //
									row_tLogRow_3[2] = String.valueOf(row4.username);

								} //

								if (row4.email != null) { //
									row_tLogRow_3[3] = String.valueOf(row4.email);

								} //

								if (row4.addressStreet != null) { //
									row_tLogRow_3[4] = String.valueOf(row4.addressStreet);

								} //

								if (row4.addressSuite != null) { //
									row_tLogRow_3[5] = String.valueOf(row4.addressSuite);

								} //

								if (row4.addressCity != null) { //
									row_tLogRow_3[6] = String.valueOf(row4.addressCity);

								} //

								if (row4.addressZipecode != null) { //
									row_tLogRow_3[7] = String.valueOf(row4.addressZipecode);

								} //

								if (row4.adresseGeo != null) { //
									row_tLogRow_3[8] = String.valueOf(row4.adresseGeo);

								} //

								if (row4.adresseGeoLat != null) { //
									row_tLogRow_3[9] = String.valueOf(row4.adresseGeoLat);

								} //

								if (row4.addressGeoLng != null) { //
									row_tLogRow_3[10] = String.valueOf(row4.addressGeoLng);

								} //

								if (row4.phone != null) { //
									row_tLogRow_3[11] = String.valueOf(row4.phone);

								} //

								if (row4.website != null) { //
									row_tLogRow_3[12] = String.valueOf(row4.website);

								} //

								if (row4.companyName != null) { //
									row_tLogRow_3[13] = String.valueOf(row4.companyName);

								} //

								if (row4.companyPhrase != null) { //
									row_tLogRow_3[14] = String.valueOf(row4.companyPhrase);

								} //

								if (row4.companyBs != null) { //
									row_tLogRow_3[15] = String.valueOf(row4.companyBs);

								} //

								util_tLogRow_3.addRow(row_tLogRow_3);
								nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_3++;

								/**
								 * [tLogRow_3 main ] stop
								 */

								/**
								 * [tLogRow_3 process_data_begin ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_3 process_data_end ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_end ] stop
								 */

							} // End of branch "row4"

							// end for
						}

					} // C_01

					/**
					 * [tExtractJSONFields_1 process_data_end ] start
					 */

					currentComponent = "tExtractJSONFields_1";

					/**
					 * [tExtractJSONFields_1 process_data_end ] stop
					 */

				} // End of branch "row3"

				/**
				 * [tRESTClient_1 process_data_end ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 process_data_end ] stop
				 */

				/**
				 * [tRESTClient_1 end ] start
				 */

				currentComponent = "tRESTClient_1";

				if (globalMap.get("tRESTClient_1_NB_LINE") == null) {
					globalMap.put("tRESTClient_1_NB_LINE", 1);
				}

// [tRESTCliend_end]

				ok_Hash.put("tRESTClient_1", true);
				end_Hash.put("tRESTClient_1", System.currentTimeMillis());

				/**
				 * [tRESTClient_1 end ] stop
				 */

				/**
				 * [tExtractJSONFields_1 end ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tExtractJSONFields_1", true);
				end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

				/**
				 * [tExtractJSONFields_1 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRESTClient_1 finally ] start
				 */

				currentComponent = "tRESTClient_1";

				/**
				 * [tRESTClient_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRESTClient_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final tUseRest tUseRestClass = new tUseRest();

		int exitCode = tUseRestClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = tUseRest.class.getClassLoader()
					.getResourceAsStream("prise_en_main/tuserest_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = tUseRest.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRESTClient_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRESTClient_1) {
			globalMap.put("tRESTClient_1_SUBPROCESS_STATE", -1);

			e_tRESTClient_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : tUseRest");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 73380 characters generated by Talend Open Studio for Data Integration on the
 * August 28, 2023 8:06:15 PM CEST
 ************************************************************************************************/