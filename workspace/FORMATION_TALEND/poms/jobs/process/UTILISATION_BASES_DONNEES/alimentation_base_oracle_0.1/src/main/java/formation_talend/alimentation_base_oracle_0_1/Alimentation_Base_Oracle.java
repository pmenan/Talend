// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package formation_talend.alimentation_base_oracle_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Alimentation_Base_Oracle Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Alimentation_Base_Oracle implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (postgresDatabase != null) {

				this.setProperty("postgresDatabase", postgresDatabase.toString());

			}

			if (postgresHost != null) {

				this.setProperty("postgresHost", postgresHost.toString());

			}

			if (postgresPassword != null) {

				this.setProperty("postgresPassword", postgresPassword.toString());

			}

			if (postgresPort != null) {

				this.setProperty("postgresPort", postgresPort.toString());

			}

			if (postgresSchema != null) {

				this.setProperty("postgresSchema", postgresSchema.toString());

			}

			if (postgresUser != null) {

				this.setProperty("postgresUser", postgresUser.toString());

			}

			if (Connexion_Oracle_AdditionalParams != null) {

				this.setProperty("Connexion_Oracle_AdditionalParams", Connexion_Oracle_AdditionalParams.toString());

			}

			if (Connexion_Oracle_Login != null) {

				this.setProperty("Connexion_Oracle_Login", Connexion_Oracle_Login.toString());

			}

			if (Connexion_Oracle_Password != null) {

				this.setProperty("Connexion_Oracle_Password", Connexion_Oracle_Password.toString());

			}

			if (Connexion_Oracle_Port != null) {

				this.setProperty("Connexion_Oracle_Port", Connexion_Oracle_Port.toString());

			}

			if (Connexion_Oracle_Schema != null) {

				this.setProperty("Connexion_Oracle_Schema", Connexion_Oracle_Schema.toString());

			}

			if (Connexion_Oracle_Server != null) {

				this.setProperty("Connexion_Oracle_Server", Connexion_Oracle_Server.toString());

			}

			if (Connexion_Oracle_Sid != null) {

				this.setProperty("Connexion_Oracle_Sid", Connexion_Oracle_Sid.toString());

			}

			if (Connexion_Postgres_Database != null) {

				this.setProperty("Connexion_Postgres_Database", Connexion_Postgres_Database.toString());

			}

			if (Connexion_Postgres_Password != null) {

				this.setProperty("Connexion_Postgres_Password", Connexion_Postgres_Password.toString());

			}

			if (Connexion_Postgres_Login != null) {

				this.setProperty("Connexion_Postgres_Login", Connexion_Postgres_Login.toString());

			}

			if (Connexion_Postgres_Port != null) {

				this.setProperty("Connexion_Postgres_Port", Connexion_Postgres_Port.toString());

			}

			if (Connexion_Postgres_Server != null) {

				this.setProperty("Connexion_Postgres_Server", Connexion_Postgres_Server.toString());

			}

			if (Connexion_Postgres_Schema != null) {

				this.setProperty("Connexion_Postgres_Schema", Connexion_Postgres_Schema.toString());

			}

			if (Connexion_Postgres_AdditionalParams != null) {

				this.setProperty("Connexion_Postgres_AdditionalParams", Connexion_Postgres_AdditionalParams.toString());

			}

		}

		public String postgresDatabase;

		public String getPostgresDatabase() {
			return this.postgresDatabase;
		}

		public String postgresHost;

		public String getPostgresHost() {
			return this.postgresHost;
		}

		public java.lang.String postgresPassword;

		public java.lang.String getPostgresPassword() {
			return this.postgresPassword;
		}

		public String postgresPort;

		public String getPostgresPort() {
			return this.postgresPort;
		}

		public String postgresSchema;

		public String getPostgresSchema() {
			return this.postgresSchema;
		}

		public String postgresUser;

		public String getPostgresUser() {
			return this.postgresUser;
		}

		public String Connexion_Oracle_AdditionalParams;

		public String getConnexion_Oracle_AdditionalParams() {
			return this.Connexion_Oracle_AdditionalParams;
		}

		public String Connexion_Oracle_Login;

		public String getConnexion_Oracle_Login() {
			return this.Connexion_Oracle_Login;
		}

		public java.lang.String Connexion_Oracle_Password;

		public java.lang.String getConnexion_Oracle_Password() {
			return this.Connexion_Oracle_Password;
		}

		public String Connexion_Oracle_Port;

		public String getConnexion_Oracle_Port() {
			return this.Connexion_Oracle_Port;
		}

		public String Connexion_Oracle_Schema;

		public String getConnexion_Oracle_Schema() {
			return this.Connexion_Oracle_Schema;
		}

		public String Connexion_Oracle_Server;

		public String getConnexion_Oracle_Server() {
			return this.Connexion_Oracle_Server;
		}

		public String Connexion_Oracle_Sid;

		public String getConnexion_Oracle_Sid() {
			return this.Connexion_Oracle_Sid;
		}

		public String Connexion_Postgres_Database;

		public String getConnexion_Postgres_Database() {
			return this.Connexion_Postgres_Database;
		}

		public java.lang.String Connexion_Postgres_Password;

		public java.lang.String getConnexion_Postgres_Password() {
			return this.Connexion_Postgres_Password;
		}

		public String Connexion_Postgres_Login;

		public String getConnexion_Postgres_Login() {
			return this.Connexion_Postgres_Login;
		}

		public String Connexion_Postgres_Port;

		public String getConnexion_Postgres_Port() {
			return this.Connexion_Postgres_Port;
		}

		public String Connexion_Postgres_Server;

		public String getConnexion_Postgres_Server() {
			return this.Connexion_Postgres_Server;
		}

		public String Connexion_Postgres_Schema;

		public String getConnexion_Postgres_Schema() {
			return this.Connexion_Postgres_Schema;
		}

		public String Connexion_Postgres_AdditionalParams;

		public String getConnexion_Postgres_AdditionalParams() {
			return this.Connexion_Postgres_AdditionalParams;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Alimentation_Base_Oracle";
	private final String projectName = "FORMATION_TALEND";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Alimentation_Base_Oracle.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Alimentation_Base_Oracle.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDie_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tDie_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDie_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tDBInput_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDie_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tDBInput_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				try {
					globalMap.put("tDie_1_DIE_PRIORITY", 5);
					System.err.println("Erreur traitement " + jobName);

					globalMap.put("tDie_1_DIE_MESSAGE", "Erreur traitement " + jobName);
					globalMap.put("tDie_1_DIE_MESSAGES", "Erreur traitement " + jobName);

				} catch (Exception | Error e_tDie_1) {
					logIgnoredError(
							String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1),
							e_tDie_1);
				}

				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 process_data_begin ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_begin ] stop
				 */

				/**
				 * [tDie_1 process_data_end ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public static class InsertionClientsStruct implements routines.system.IPersistableRow<InsertionClientsStruct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Long Id;

		public Long getId() {
			return this.Id;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date Date_naissance;

		public java.util.Date getDate_naissance() {
			return this.Date_naissance;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final InsertionClientsStruct other = (InsertionClientsStruct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(InsertionClientsStruct other) {

			other.Id = this.Id;
			other.Prenom = this.Prenom;
			other.Nom = this.Nom;
			other.Date_naissance = this.Date_naissance;
			other.Code_postal = this.Code_postal;

		}

		public void copyKeysDataTo(InsertionClientsStruct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					length = dis.readByte();
					if (length == -1) {
						this.Id = null;
					} else {
						this.Id = dis.readLong();
					}

					this.Prenom = readString(dis);

					this.Nom = readString(dis);

					this.Date_naissance = readDate(dis);

					this.Code_postal = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Long

				if (this.Id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.Id);
				}

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.Date_naissance, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Prenom=" + Prenom);
			sb.append(",Nom=" + Nom);
			sb.append(",Date_naissance=" + String.valueOf(Date_naissance));
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(InsertionClientsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];

		public long Id;

		public long getId() {
			return this.Id;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date Date_naissance;

		public java.util.Date getDate_naissance() {
			return this.Date_naissance;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					this.Id = dis.readLong();

					this.Prenom = readString(dis);

					this.Nom = readString(dis);

					this.Date_naissance = readDate(dis);

					this.Code_postal = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Id);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.Date_naissance, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Prenom=" + Prenom);
			sb.append(",Nom=" + Nom);
			sb.append(",Date_naissance=" + String.valueOf(Date_naissance));
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				InsertionClientsStruct InsertionClients = new InsertionClientsStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String url_tDBOutput_1 = null;
				url_tDBOutput_1 = "jdbc:oracle:thin:@" + context.Connexion_Oracle_Server + ":"
						+ context.Connexion_Oracle_Port + ":" + context.Connexion_Oracle_Sid;
				String dbUser_tDBOutput_1 = context.Connexion_Oracle_Login;

				final String decryptedPassword_tDBOutput_1 = context.Connexion_Oracle_Password;

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				dbschema_tDBOutput_1 = context.Connexion_Oracle_Schema;

				java.util.Properties atnParamsPrope_tDBOutput_1 = new java.util.Properties();
				atnParamsPrope_tDBOutput_1.put("user", dbUser_tDBOutput_1);
				atnParamsPrope_tDBOutput_1.put("password", dbPwd_tDBOutput_1);
				if (context.Connexion_Oracle_AdditionalParams != null
						&& !"\"\"".equals(context.Connexion_Oracle_AdditionalParams)
						&& !"".equals(context.Connexion_Oracle_AdditionalParams)) {
					atnParamsPrope_tDBOutput_1.load(new java.io.ByteArrayInputStream(
							context.Connexion_Oracle_AdditionalParams.replace("&", "\n").getBytes()));
				}
				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, atnParamsPrope_tDBOutput_1);
				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("Clients");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("Clients");
				}
				String tableNameForSearch_tDBOutput_1 = "" + ((String) "Clients") + "";
				String dbschemaForSearch_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_1 = ((String) context.Connexion_Oracle_Login).toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				if (tableNameForSearch_tDBOutput_1.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null,
						dbschemaForSearch_tDBOutput_1, tableNameForSearch_tDBOutput_1, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_1.next()) {
						whetherExist_tDBOutput_1 = true;
					}
				}

				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE " + tableName_tDBOutput_1 + "");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1
							+ "(Id NUMBER(2,0)  ,Prenom VARCHAR(30)  ,Nom VARCHAR(30)  ,Date_naissance DATE ,Code_postal INT ,primary key(Id))");
				}
				String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1
						+ " (Id,Prenom,Nom,Date_naissance,Code_postal) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				InsertionClientsStruct InsertionClients_tmp = new InsertionClientsStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = context.Connexion_Postgres_Login;

				final String decryptedPassword_tDBInput_1 = context.Connexion_Postgres_Password;

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:postgresql://" + context.Connexion_Postgres_Server + ":"
						+ context.Connexion_Postgres_Port + "/" + context.Connexion_Postgres_Database + "?"
						+ context.Connexion_Postgres_AdditionalParams;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				conn_tDBInput_1.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Clients\".\"Id\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Clients\".\"Prenom\", \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Clients\".\"Nom\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Clients\".\"Date_naissance\", \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Clients\".\"Code_postal\"\nFROM \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Clients\"";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.Id = 0;
						} else {

							row1.Id = rs_tDBInput_1.getLong(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.Prenom = null;
						} else {

							row1.Prenom = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.Nom = null;
						} else {

							row1.Nom = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Date_naissance = null;
						} else {

							row1.Date_naissance = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 4);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.Code_postal = null;
						} else {

							row1.Code_postal = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								row1.Code_postal = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							InsertionClients = null;

// # Output table : 'InsertionClients'
							InsertionClients_tmp.Id = row1.Id;
							InsertionClients_tmp.Prenom = row1.Prenom;
							InsertionClients_tmp.Nom = row1.Nom;
							InsertionClients_tmp.Date_naissance = row1.Date_naissance;
							InsertionClients_tmp.Code_postal = row1.Code_postal;
							InsertionClients = InsertionClients_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "InsertionClients"
						if (InsertionClients != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							whetherReject_tDBOutput_1 = false;
							if (InsertionClients.Id == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setLong(1, InsertionClients.Id);
							}

							if (InsertionClients.Prenom == null) {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2, InsertionClients.Prenom);
							}

							if (InsertionClients.Nom == null) {
								pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(3, InsertionClients.Nom);
							}

							if (InsertionClients.Date_naissance != null) {
								pstmt_tDBOutput_1.setObject(4,
										new java.sql.Timestamp(InsertionClients.Date_naissance.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tDBOutput_1.setNull(4, java.sql.Types.DATE);
							}

							if (InsertionClients.Code_postal == null) {
								pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(5, InsertionClients.Code_postal);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;
							batchSizeCounter_tDBOutput_1++;
							if (batchSize_tDBOutput_1 > 0 && batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
								try {
									pstmt_tDBOutput_1.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									System.err.println(errormessage_tDBOutput_1);

								}
								tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
								insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
										? tmp_batchUpdateCount_tDBOutput_1
										: 0);
								batchSizeCounter_tDBOutput_1 = 0;
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

								try {
									pstmt_tDBOutput_1.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									System.err.println(errormessage_tDBOutput_1);

								}
								tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
								insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
										? tmp_batchUpdateCount_tDBOutput_1
										: 0);
								conn_tDBOutput_1.commit();
								commitCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "InsertionClients"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.commit();

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (pstmt_tDBOutput_1 != null) {

						pstmt_tDBOutput_1.executeBatch();

					}
				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					System.err.println(errormessage_tDBOutput_1);

				}
				if (pstmt_tDBOutput_1 != null) {
					tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();

					insertedCount_tDBOutput_1

							+= (tmp_batchUpdateCount_tDBOutput_1 != -1 ? tmp_batchUpdateCount_tDBOutput_1 : 0);
				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			tDBInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class detailsStruct implements routines.system.IPersistableRow<detailsStruct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Id;

		public long getId() {
			return this.Id;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date Date_naissance;

		public java.util.Date getDate_naissance() {
			return this.Date_naissance;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Sexe;

		public String getSexe() {
			return this.Sexe;
		}

		public String Marque_Voiture;

		public String getMarque_Voiture() {
			return this.Marque_Voiture;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final detailsStruct other = (detailsStruct) obj;

			if (this.Id != other.Id)
				return false;

			return true;
		}

		public void copyDataTo(detailsStruct other) {

			other.Id = this.Id;
			other.Prenom = this.Prenom;
			other.Nom = this.Nom;
			other.Date_naissance = this.Date_naissance;
			other.Code_postal = this.Code_postal;
			other.Sexe = this.Sexe;
			other.Marque_Voiture = this.Marque_Voiture;

		}

		public void copyKeysDataTo(detailsStruct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					this.Id = dis.readLong();

					this.Prenom = readString(dis);

					this.Nom = readString(dis);

					this.Date_naissance = readDate(dis);

					this.Code_postal = readInteger(dis);

					this.Sexe = readString(dis);

					this.Marque_Voiture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Id);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.Date_naissance, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Sexe, dos);

				// String

				writeString(this.Marque_Voiture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Prenom=" + Prenom);
			sb.append(",Nom=" + Nom);
			sb.append(",Date_naissance=" + String.valueOf(Date_naissance));
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Sexe=" + Sexe);
			sb.append(",Marque_Voiture=" + Marque_Voiture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(detailsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];

		public long Id;

		public long getId() {
			return this.Id;
		}

		public String Prenom;

		public String getPrenom() {
			return this.Prenom;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date Date_naissance;

		public java.util.Date getDate_naissance() {
			return this.Date_naissance;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Sexe;

		public String getSexe() {
			return this.Sexe;
		}

		public String Marque_Voiture;

		public String getMarque_Voiture() {
			return this.Marque_Voiture;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					this.Id = dis.readLong();

					this.Prenom = readString(dis);

					this.Nom = readString(dis);

					this.Date_naissance = readDate(dis);

					this.Code_postal = readInteger(dis);

					this.Sexe = readString(dis);

					this.Marque_Voiture = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Id);

				// String

				writeString(this.Prenom, dos);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.Date_naissance, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Sexe, dos);

				// String

				writeString(this.Marque_Voiture, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Prenom=" + Prenom);
			sb.append(",Nom=" + Nom);
			sb.append(",Date_naissance=" + String.valueOf(Date_naissance));
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Sexe=" + Sexe);
			sb.append(",Marque_Voiture=" + Marque_Voiture);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				detailsStruct details = new detailsStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int tmp_batchUpdateCount_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;

				// optional table
				String dbschema_tDBOutput_2 = null;
				String tableName_tDBOutput_2 = null;
				String driverClass_tDBOutput_2 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_2);
				String url_tDBOutput_2 = null;
				url_tDBOutput_2 = "jdbc:oracle:thin:@" + context.Connexion_Oracle_Server + ":"
						+ context.Connexion_Oracle_Port + ":" + context.Connexion_Oracle_Sid;
				String dbUser_tDBOutput_2 = context.Connexion_Oracle_Login;

				final String decryptedPassword_tDBOutput_2 = context.Connexion_Oracle_Password;

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				dbschema_tDBOutput_2 = context.Connexion_Oracle_Schema;

				java.util.Properties atnParamsPrope_tDBOutput_2 = new java.util.Properties();
				atnParamsPrope_tDBOutput_2.put("user", dbUser_tDBOutput_2);
				atnParamsPrope_tDBOutput_2.put("password", dbPwd_tDBOutput_2);
				if (context.Connexion_Oracle_AdditionalParams != null
						&& !"\"\"".equals(context.Connexion_Oracle_AdditionalParams)
						&& !"".equals(context.Connexion_Oracle_AdditionalParams)) {
					atnParamsPrope_tDBOutput_2.load(new java.io.ByteArrayInputStream(
							context.Connexion_Oracle_AdditionalParams.replace("&", "\n").getBytes()));
				}
				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, atnParamsPrope_tDBOutput_2);
				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;
				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;
				int count_tDBOutput_2 = 0;

				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("Clients_details");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "." + ("Clients_details");
				}
				String tableNameForSearch_tDBOutput_2 = "" + ((String) "Clients_details") + "";
				String dbschemaForSearch_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_2 = ((String) context.Connexion_Oracle_Login).toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_2 = dbschema_tDBOutput_2.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				if (tableNameForSearch_tDBOutput_2.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_2 = tableNameForSearch_tDBOutput_2.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_2 = tableNameForSearch_tDBOutput_2.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_2 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables(null,
						dbschemaForSearch_tDBOutput_2, tableNameForSearch_tDBOutput_2, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_2.next()) {
						whetherExist_tDBOutput_2 = true;
					}
				}

				if (!whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtCreate_tDBOutput_2.execute("CREATE TABLE " + tableName_tDBOutput_2
								+ "(Id NUMBER(2,0)   not null ,Prenom VARCHAR(30)  ,Nom VARCHAR(30)  ,Date_naissance TIMESTAMP(0)  ,Code_postal INT ,Sexe VARCHAR(10)  ,Marque_Voiture VARCHAR(10)  ,primary key(Id))");
					}
				}
				String insert_tDBOutput_2 = "INSERT INTO " + tableName_tDBOutput_2
						+ " (Id,Prenom,Nom,Date_naissance,Code_postal,Sexe,Marque_Voiture) VALUES (?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				detailsStruct details_tmp = new detailsStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = context.Connexion_Postgres_Login;

				final String decryptedPassword_tDBInput_2 = context.Connexion_Postgres_Password;

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + context.Connexion_Postgres_Server + ":"
						+ context.Connexion_Postgres_Port + "/" + context.Connexion_Postgres_Database + "?"
						+ context.Connexion_Postgres_AdditionalParams;

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Clients_details\".\"Id\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Clients_details\".\"Prenom\", \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Clients_details\".\"Nom\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Clients_details\".\"Date_naissance\", \n  \"" + context.Connexion_Postgres_Database
						+ "\".\"" + context.Connexion_Postgres_Schema + "\".\"Clients_details\".\"Code_postal\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Clients_details\".\"Sexe\", \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Clients_details\".\"Marque_Voiture\"\nFROM \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Clients_details\"";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.Id = 0;
						} else {

							row2.Id = rs_tDBInput_2.getLong(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.Prenom = null;
						} else {

							row2.Prenom = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.Nom = null;
						} else {

							row2.Nom = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.Date_naissance = null;
						} else {

							row2.Date_naissance = routines.system.JDBCUtil.getDate(rs_tDBInput_2, 4);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.Code_postal = null;
						} else {

							row2.Code_postal = rs_tDBInput_2.getInt(5);
							if (rs_tDBInput_2.wasNull()) {
								row2.Code_postal = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.Sexe = null;
						} else {

							row2.Sexe = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.Marque_Voiture = null;
						} else {

							row2.Marque_Voiture = routines.system.JDBCUtil.getString(rs_tDBInput_2, 7, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							details = null;

// # Output table : 'details'
							details_tmp.Id = row2.Id;
							details_tmp.Prenom = row2.Prenom;
							details_tmp.Nom = row2.Nom;
							details_tmp.Date_naissance = row2.Date_naissance;
							details_tmp.Code_postal = row2.Code_postal;
							details_tmp.Sexe = row2.Sexe;
							details_tmp.Marque_Voiture = row2.Marque_Voiture;
							details = details_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "details"
						if (details != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							whetherReject_tDBOutput_2 = false;
							pstmt_tDBOutput_2.setLong(1, details.Id);

							if (details.Prenom == null) {
								pstmt_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(2, details.Prenom);
							}

							if (details.Nom == null) {
								pstmt_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(3, details.Nom);
							}

							if (details.Date_naissance != null) {
								pstmt_tDBOutput_2.setTimestamp(4,
										new java.sql.Timestamp(details.Date_naissance.getTime()));
							} else {
								pstmt_tDBOutput_2.setNull(4, java.sql.Types.DATE);
							}

							if (details.Code_postal == null) {
								pstmt_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setInt(5, details.Code_postal);
							}

							if (details.Sexe == null) {
								pstmt_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(6, details.Sexe);
							}

							if (details.Marque_Voiture == null) {
								pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_2.setString(7, details.Marque_Voiture);
							}

							pstmt_tDBOutput_2.addBatch();
							nb_line_tDBOutput_2++;
							batchSizeCounter_tDBOutput_2++;
							if (batchSize_tDBOutput_2 > 0 && batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
								try {
									pstmt_tDBOutput_2.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
											sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_2.getMessage(),
												ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
									}

									System.err.println(errormessage_tDBOutput_2);

								}
								tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
								insertedCount_tDBOutput_2 += (tmp_batchUpdateCount_tDBOutput_2 != -1
										? tmp_batchUpdateCount_tDBOutput_2
										: 0);
								batchSizeCounter_tDBOutput_2 = 0;
							}
							commitCounter_tDBOutput_2++;
							if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

								try {
									pstmt_tDBOutput_2.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
											sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_2.getMessage(),
												ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
									}

									System.err.println(errormessage_tDBOutput_2);

								}
								tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
								insertedCount_tDBOutput_2 += (tmp_batchUpdateCount_tDBOutput_2 != -1
										? tmp_batchUpdateCount_tDBOutput_2
										: 0);
								conn_tDBOutput_2.commit();
								commitCounter_tDBOutput_2 = 0;
							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "details"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (pstmt_tDBOutput_2 != null) {

						pstmt_tDBOutput_2.executeBatch();

					}
				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					System.err.println(errormessage_tDBOutput_2);

				}
				if (pstmt_tDBOutput_2 != null) {
					tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();

					insertedCount_tDBOutput_2

							+= (tmp_batchUpdateCount_tDBOutput_2 != -1 ? tmp_batchUpdateCount_tDBOutput_2 : 0);
				}
				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0) {

					conn_tDBOutput_2.commit();

				}

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			tDBInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class InsertionIndividusStruct implements routines.system.IPersistableRow<InsertionIndividusStruct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long Id;

		public long getId() {
			return this.Id;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public Integer CodePostal;

		public Integer getCodePostal() {
			return this.CodePostal;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.Id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final InsertionIndividusStruct other = (InsertionIndividusStruct) obj;

			if (this.Id != other.Id)
				return false;

			return true;
		}

		public void copyDataTo(InsertionIndividusStruct other) {

			other.Id = this.Id;
			other.Nom = this.Nom;
			other.date_creation = this.date_creation;
			other.CodePostal = this.CodePostal;

		}

		public void copyKeysDataTo(InsertionIndividusStruct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					this.Id = dis.readLong();

					this.Nom = readString(dis);

					this.date_creation = readDate(dis);

					this.CodePostal = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Id);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// Integer

				writeInteger(this.CodePostal, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Nom=" + Nom);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",CodePostal=" + String.valueOf(CodePostal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(InsertionIndividusStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];

		public long Id;

		public long getId() {
			return this.Id;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public Integer CodePostal;

		public Integer getCodePostal() {
			return this.CodePostal;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					this.Id = dis.readLong();

					this.Nom = readString(dis);

					this.date_creation = readDate(dis);

					this.CodePostal = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.Id);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// Integer

				writeInteger(this.CodePostal, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Nom=" + Nom);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",CodePostal=" + String.valueOf(CodePostal));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				InsertionIndividusStruct InsertionIndividus = new InsertionIndividusStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int tmp_batchUpdateCount_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;

				// optional table
				String dbschema_tDBOutput_3 = null;
				String tableName_tDBOutput_3 = null;
				String driverClass_tDBOutput_3 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_3);
				String url_tDBOutput_3 = null;
				url_tDBOutput_3 = "jdbc:oracle:thin:@" + context.Connexion_Oracle_Server + ":"
						+ context.Connexion_Oracle_Port + ":" + context.Connexion_Oracle_Sid;
				String dbUser_tDBOutput_3 = context.Connexion_Oracle_Login;

				final String decryptedPassword_tDBOutput_3 = context.Connexion_Oracle_Password;

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				dbschema_tDBOutput_3 = context.Connexion_Oracle_Schema;

				java.util.Properties atnParamsPrope_tDBOutput_3 = new java.util.Properties();
				atnParamsPrope_tDBOutput_3.put("user", dbUser_tDBOutput_3);
				atnParamsPrope_tDBOutput_3.put("password", dbPwd_tDBOutput_3);
				if (context.Connexion_Oracle_AdditionalParams != null
						&& !"\"\"".equals(context.Connexion_Oracle_AdditionalParams)
						&& !"".equals(context.Connexion_Oracle_AdditionalParams)) {
					atnParamsPrope_tDBOutput_3.load(new java.io.ByteArrayInputStream(
							context.Connexion_Oracle_AdditionalParams.replace("&", "\n").getBytes()));
				}
				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, atnParamsPrope_tDBOutput_3);
				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;
				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;
				int count_tDBOutput_3 = 0;

				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("Individus");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "." + ("Individus");
				}
				String tableNameForSearch_tDBOutput_3 = "" + ((String) "Individus") + "";
				String dbschemaForSearch_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_3 = ((String) context.Connexion_Oracle_Login).toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_3 = dbschema_tDBOutput_3.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_3 = conn_tDBOutput_3.getMetaData();
				if (tableNameForSearch_tDBOutput_3.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_3 = tableNameForSearch_tDBOutput_3.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_3 = tableNameForSearch_tDBOutput_3.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_3 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_3 = dbMetaData_tDBOutput_3.getTables(null,
						dbschemaForSearch_tDBOutput_3, tableNameForSearch_tDBOutput_3, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_3.next()) {
						whetherExist_tDBOutput_3 = true;
					}
				}

				if (whetherExist_tDBOutput_3) {
					try (java.sql.Statement stmtDrop_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
						stmtDrop_tDBOutput_3.execute("DROP TABLE " + tableName_tDBOutput_3 + "");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_3 = conn_tDBOutput_3.createStatement()) {
					stmtCreate_tDBOutput_3.execute("CREATE TABLE " + tableName_tDBOutput_3
							+ "(Id NUMBER(8,0)   not null ,Nom VARCHAR(30)  ,date_creation TIMESTAMP(0)  ,CodePostal INT ,primary key(Id))");
				}
				String insert_tDBOutput_3 = "INSERT INTO " + tableName_tDBOutput_3
						+ " (Id,Nom,date_creation,CodePostal) VALUES (?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				InsertionIndividusStruct InsertionIndividus_tmp = new InsertionIndividusStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = context.Connexion_Postgres_Login;

				final String decryptedPassword_tDBInput_3 = context.Connexion_Postgres_Password;

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + context.Connexion_Postgres_Server + ":"
						+ context.Connexion_Postgres_Port + "/" + context.Connexion_Postgres_Database + "?"
						+ context.Connexion_Postgres_AdditionalParams;

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Individus\".\"Id\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Individus\".\"Nom\", \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Individus\".\"date_creation\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Individus\".\"CodePostal\"\nFROM \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Individus\"";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.Id = 0;
						} else {

							row3.Id = rs_tDBInput_3.getLong(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.Nom = null;
						} else {

							row3.Nom = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.date_creation = null;
						} else {

							row3.date_creation = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 3);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.CodePostal = null;
						} else {

							row3.CodePostal = rs_tDBInput_3.getInt(4);
							if (rs_tDBInput_3.wasNull()) {
								row3.CodePostal = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							InsertionIndividus = null;

// # Output table : 'InsertionIndividus'
							InsertionIndividus_tmp.Id = row3.Id;
							InsertionIndividus_tmp.Nom = row3.Nom;
							InsertionIndividus_tmp.date_creation = row3.date_creation;
							InsertionIndividus_tmp.CodePostal = row3.CodePostal;
							InsertionIndividus = InsertionIndividus_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "InsertionIndividus"
						if (InsertionIndividus != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							whetherReject_tDBOutput_3 = false;
							pstmt_tDBOutput_3.setLong(1, InsertionIndividus.Id);

							if (InsertionIndividus.Nom == null) {
								pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(2, InsertionIndividus.Nom);
							}

							if (InsertionIndividus.date_creation != null) {
								pstmt_tDBOutput_3.setTimestamp(3,
										new java.sql.Timestamp(InsertionIndividus.date_creation.getTime()));
							} else {
								pstmt_tDBOutput_3.setNull(3, java.sql.Types.DATE);
							}

							if (InsertionIndividus.CodePostal == null) {
								pstmt_tDBOutput_3.setNull(4, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_3.setInt(4, InsertionIndividus.CodePostal);
							}

							pstmt_tDBOutput_3.addBatch();
							nb_line_tDBOutput_3++;
							batchSizeCounter_tDBOutput_3++;
							if (batchSize_tDBOutput_3 > 0 && batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
								try {
									pstmt_tDBOutput_3.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
											sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_3.getMessage(),
												ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
									}

									System.err.println(errormessage_tDBOutput_3);

								}
								tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
								insertedCount_tDBOutput_3 += (tmp_batchUpdateCount_tDBOutput_3 != -1
										? tmp_batchUpdateCount_tDBOutput_3
										: 0);
								batchSizeCounter_tDBOutput_3 = 0;
							}
							commitCounter_tDBOutput_3++;
							if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {

								try {
									pstmt_tDBOutput_3.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
											sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_3.getMessage(),
												ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
									}

									System.err.println(errormessage_tDBOutput_3);

								}
								tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
								insertedCount_tDBOutput_3 += (tmp_batchUpdateCount_tDBOutput_3 != -1
										? tmp_batchUpdateCount_tDBOutput_3
										: 0);
								conn_tDBOutput_3.commit();
								commitCounter_tDBOutput_3 = 0;
							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "InsertionIndividus"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (pstmt_tDBOutput_3 != null) {

						pstmt_tDBOutput_3.executeBatch();

					}
				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					System.err.println(errormessage_tDBOutput_3);

				}
				if (pstmt_tDBOutput_3 != null) {
					tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();

					insertedCount_tDBOutput_3

							+= (tmp_batchUpdateCount_tDBOutput_3 != -1 ? tmp_batchUpdateCount_tDBOutput_3 : 0);
				}
				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				if (commitCounter_tDBOutput_3 > 0) {

					conn_tDBOutput_3.commit();

				}

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			tDBInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class InsertionIndividusDetailStruct
			implements routines.system.IPersistableRow<InsertionIndividusDetailStruct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public Integer CodePostal;

		public Integer getCodePostal() {
			return this.CodePostal;
		}

		public String Activite;

		public String getActivite() {
			return this.Activite;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Id == null) ? 0 : this.Id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final InsertionIndividusDetailStruct other = (InsertionIndividusDetailStruct) obj;

			if (this.Id == null) {
				if (other.Id != null)
					return false;

			} else if (!this.Id.equals(other.Id))

				return false;

			return true;
		}

		public void copyDataTo(InsertionIndividusDetailStruct other) {

			other.Id = this.Id;
			other.Nom = this.Nom;
			other.date_creation = this.date_creation;
			other.CodePostal = this.CodePostal;
			other.Activite = this.Activite;

		}

		public void copyKeysDataTo(InsertionIndividusDetailStruct other) {

			other.Id = this.Id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Nom = readString(dis);

					this.date_creation = readDate(dis);

					this.CodePostal = readInteger(dis);

					this.Activite = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// Integer

				writeInteger(this.CodePostal, dos);

				// String

				writeString(this.Activite, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Nom=" + Nom);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",CodePostal=" + String.valueOf(CodePostal));
			sb.append(",Activite=" + Activite);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(InsertionIndividusDetailStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Id, other.Id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];
		static byte[] commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[0];

		public String Id;

		public String getId() {
			return this.Id;
		}

		public String Nom;

		public String getNom() {
			return this.Nom;
		}

		public java.util.Date date_creation;

		public java.util.Date getDate_creation() {
			return this.date_creation;
		}

		public Integer CodePostal;

		public Integer getCodePostal() {
			return this.CodePostal;
		}

		public String Activite;

		public String getActivite() {
			return this.Activite;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length) {
					if (length < 1024 && commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle.length == 0) {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[1024];
					} else {
						commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length);
				strReturn = new String(commonByteArray_FORMATION_TALEND_Alimentation_Base_Oracle, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_FORMATION_TALEND_Alimentation_Base_Oracle) {

				try {

					int length = 0;

					this.Id = readString(dis);

					this.Nom = readString(dis);

					this.date_creation = readDate(dis);

					this.CodePostal = readInteger(dis);

					this.Activite = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Id, dos);

				// String

				writeString(this.Nom, dos);

				// java.util.Date

				writeDate(this.date_creation, dos);

				// Integer

				writeInteger(this.CodePostal, dos);

				// String

				writeString(this.Activite, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + Id);
			sb.append(",Nom=" + Nom);
			sb.append(",date_creation=" + String.valueOf(date_creation));
			sb.append(",CodePostal=" + String.valueOf(CodePostal));
			sb.append(",Activite=" + Activite);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				InsertionIndividusDetailStruct InsertionIndividusDetail = new InsertionIndividusDetailStruct();

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				int tos_count_tDBOutput_4 = 0;

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int tmp_batchUpdateCount_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;

				// optional table
				String dbschema_tDBOutput_4 = null;
				String tableName_tDBOutput_4 = null;
				String driverClass_tDBOutput_4 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_4);
				String url_tDBOutput_4 = null;
				url_tDBOutput_4 = "jdbc:oracle:thin:@" + context.Connexion_Oracle_Server + ":"
						+ context.Connexion_Oracle_Port + ":" + context.Connexion_Oracle_Sid;
				String dbUser_tDBOutput_4 = context.Connexion_Oracle_Login;

				final String decryptedPassword_tDBOutput_4 = context.Connexion_Oracle_Password;

				String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
				dbschema_tDBOutput_4 = context.Connexion_Oracle_Schema;

				java.util.Properties atnParamsPrope_tDBOutput_4 = new java.util.Properties();
				atnParamsPrope_tDBOutput_4.put("user", dbUser_tDBOutput_4);
				atnParamsPrope_tDBOutput_4.put("password", dbPwd_tDBOutput_4);
				if (context.Connexion_Oracle_AdditionalParams != null
						&& !"\"\"".equals(context.Connexion_Oracle_AdditionalParams)
						&& !"".equals(context.Connexion_Oracle_AdditionalParams)) {
					atnParamsPrope_tDBOutput_4.load(new java.io.ByteArrayInputStream(
							context.Connexion_Oracle_AdditionalParams.replace("&", "\n").getBytes()));
				}
				conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, atnParamsPrope_tDBOutput_4);
				resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
				conn_tDBOutput_4.setAutoCommit(false);
				int commitEvery_tDBOutput_4 = 10000;
				int commitCounter_tDBOutput_4 = 0;
				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;
				int count_tDBOutput_4 = 0;

				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = ("Individus_Details");
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "." + ("Individus_Details");
				}
				String tableNameForSearch_tDBOutput_4 = "" + ((String) "Individus_Details") + "";
				String dbschemaForSearch_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_4 = ((String) context.Connexion_Oracle_Login).toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_4 = dbschema_tDBOutput_4.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_4 = conn_tDBOutput_4.getMetaData();
				if (tableNameForSearch_tDBOutput_4.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_4 = tableNameForSearch_tDBOutput_4.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_4 = tableNameForSearch_tDBOutput_4.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_4 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_4 = dbMetaData_tDBOutput_4.getTables(null,
						dbschemaForSearch_tDBOutput_4, tableNameForSearch_tDBOutput_4, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_4.next()) {
						whetherExist_tDBOutput_4 = true;
					}
				}

				if (!whetherExist_tDBOutput_4) {
					try (java.sql.Statement stmtCreate_tDBOutput_4 = conn_tDBOutput_4.createStatement()) {
						stmtCreate_tDBOutput_4.execute("CREATE TABLE " + tableName_tDBOutput_4
								+ "(Id VARCHAR(8)   not null ,Nom VARCHAR(30)  ,date_creation TIMESTAMP(0)  ,CodePostal INT ,Activite VARCHAR(15)  ,primary key(Id))");
					}
				}
				String insert_tDBOutput_4 = "INSERT INTO " + tableName_tDBOutput_4
						+ " (Id,Nom,date_creation,CodePostal,Activite) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				InsertionIndividusDetailStruct InsertionIndividusDetail_tmp = new InsertionIndividusDetailStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = context.Connexion_Postgres_Login;

				final String decryptedPassword_tDBInput_4 = context.Connexion_Postgres_Password;

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://" + context.Connexion_Postgres_Server + ":"
						+ context.Connexion_Postgres_Port + "/" + context.Connexion_Postgres_Database + "?"
						+ context.Connexion_Postgres_AdditionalParams;

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Individus_Details\".\"Id\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Individus_Details\".\"Nom\", \n  \"" + context.Connexion_Postgres_Database + "\".\""
						+ context.Connexion_Postgres_Schema + "\".\"Individus_Details\".\"date_creation\", \n  \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Individus_Details\".\"CodePostal\", \n  \"" + context.Connexion_Postgres_Database
						+ "\".\"" + context.Connexion_Postgres_Schema + "\".\"Individus_Details\".\"Activite\"\nFROM \""
						+ context.Connexion_Postgres_Database + "\".\"" + context.Connexion_Postgres_Schema
						+ "\".\"Individus_Details\"";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.Id = null;
						} else {

							row4.Id = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, false);
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.Nom = null;
						} else {

							row4.Nom = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.date_creation = null;
						} else {

							row4.date_creation = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 3);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.CodePostal = null;
						} else {

							row4.CodePostal = rs_tDBInput_4.getInt(4);
							if (rs_tDBInput_4.wasNull()) {
								row4.CodePostal = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.Activite = null;
						} else {

							row4.Activite = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							InsertionIndividusDetail = null;

// # Output table : 'InsertionIndividusDetail'
							InsertionIndividusDetail_tmp.Id = row4.Id;
							InsertionIndividusDetail_tmp.Nom = row4.Nom;
							InsertionIndividusDetail_tmp.date_creation = row4.date_creation;
							InsertionIndividusDetail_tmp.CodePostal = row4.CodePostal;
							InsertionIndividusDetail_tmp.Activite = row4.Activite;
							InsertionIndividusDetail = InsertionIndividusDetail_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */

						/**
						 * [tMap_4 process_data_begin ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_begin ] stop
						 */
// Start of branch "InsertionIndividusDetail"
						if (InsertionIndividusDetail != null) {

							/**
							 * [tDBOutput_4 main ] start
							 */

							currentComponent = "tDBOutput_4";

							whetherReject_tDBOutput_4 = false;
							if (InsertionIndividusDetail.Id == null) {
								pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_4.setString(1, InsertionIndividusDetail.Id);
							}

							if (InsertionIndividusDetail.Nom == null) {
								pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_4.setString(2, InsertionIndividusDetail.Nom);
							}

							if (InsertionIndividusDetail.date_creation != null) {
								pstmt_tDBOutput_4.setTimestamp(3,
										new java.sql.Timestamp(InsertionIndividusDetail.date_creation.getTime()));
							} else {
								pstmt_tDBOutput_4.setNull(3, java.sql.Types.DATE);
							}

							if (InsertionIndividusDetail.CodePostal == null) {
								pstmt_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_4.setInt(4, InsertionIndividusDetail.CodePostal);
							}

							if (InsertionIndividusDetail.Activite == null) {
								pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_4.setString(5, InsertionIndividusDetail.Activite);
							}

							pstmt_tDBOutput_4.addBatch();
							nb_line_tDBOutput_4++;
							batchSizeCounter_tDBOutput_4++;
							if (batchSize_tDBOutput_4 > 0 && batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
								try {
									pstmt_tDBOutput_4.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
									java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
											sqle_tDBOutput_4 = null;
									String errormessage_tDBOutput_4;
									if (ne_tDBOutput_4 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_4 = new java.sql.SQLException(
												e_tDBOutput_4.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_4.getMessage(),
												ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
												ne_tDBOutput_4);
										errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
									} else {
										errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
									}

									System.err.println(errormessage_tDBOutput_4);

								}
								tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
								insertedCount_tDBOutput_4 += (tmp_batchUpdateCount_tDBOutput_4 != -1
										? tmp_batchUpdateCount_tDBOutput_4
										: 0);
								batchSizeCounter_tDBOutput_4 = 0;
							}
							commitCounter_tDBOutput_4++;
							if (commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {

								try {
									pstmt_tDBOutput_4.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
									java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
											sqle_tDBOutput_4 = null;
									String errormessage_tDBOutput_4;
									if (ne_tDBOutput_4 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_4 = new java.sql.SQLException(
												e_tDBOutput_4.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_4.getMessage(),
												ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
												ne_tDBOutput_4);
										errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
									} else {
										errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
									}

									System.err.println(errormessage_tDBOutput_4);

								}
								tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
								insertedCount_tDBOutput_4 += (tmp_batchUpdateCount_tDBOutput_4 != -1
										? tmp_batchUpdateCount_tDBOutput_4
										: 0);
								conn_tDBOutput_4.commit();
								commitCounter_tDBOutput_4 = 0;
							}

							tos_count_tDBOutput_4++;

							/**
							 * [tDBOutput_4 main ] stop
							 */

							/**
							 * [tDBOutput_4 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_4 process_data_end ] start
							 */

							currentComponent = "tDBOutput_4";

							/**
							 * [tDBOutput_4 process_data_end ] stop
							 */

						} // End of branch "InsertionIndividusDetail"

						/**
						 * [tMap_4 process_data_end ] start
						 */

						currentComponent = "tMap_4";

						/**
						 * [tMap_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (pstmt_tDBOutput_4 != null) {

						pstmt_tDBOutput_4.executeBatch();

					}
				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					System.err.println(errormessage_tDBOutput_4);

				}
				if (pstmt_tDBOutput_4 != null) {
					tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();

					insertedCount_tDBOutput_4

							+= (tmp_batchUpdateCount_tDBOutput_4 != -1 ? tmp_batchUpdateCount_tDBOutput_4 : 0);
				}
				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");

				}
				resourceMap.put("statementClosed_tDBOutput_4", true);
				if (commitCounter_tDBOutput_4 > 0) {

					conn_tDBOutput_4.commit();

				}

				conn_tDBOutput_4.close();

				resourceMap.put("finish_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
						if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_4")) != null) {
							pstmtToClose_tDBOutput_4.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_4") == null) {
						java.sql.Connection ctn_tDBOutput_4 = null;
						if ((ctn_tDBOutput_4 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_4")) != null) {
							try {
								ctn_tDBOutput_4.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_4) {
								String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :"
										+ sqlEx_tDBOutput_4.getMessage();
								System.err.println(errorMessage_tDBOutput_4);
							}
						}
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				try {
					globalMap.put("tDie_2_DIE_PRIORITY", 5);
					System.err.println("Erreur traitement " + jobName);

					globalMap.put("tDie_2_DIE_MESSAGE", "Erreur traitement " + jobName);
					globalMap.put("tDie_2_DIE_MESSAGES", "Erreur traitement " + jobName);

				} catch (Exception | Error e_tDie_2) {
					logIgnoredError(
							String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2),
							e_tDie_2);
				}

				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 process_data_begin ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 process_data_begin ] stop
				 */

				/**
				 * [tDie_2 process_data_end ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 process_data_end ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public void tDie_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_3 begin ] start
				 */

				ok_Hash.put("tDie_3", false);
				start_Hash.put("tDie_3", System.currentTimeMillis());

				currentComponent = "tDie_3";

				int tos_count_tDie_3 = 0;

				/**
				 * [tDie_3 begin ] stop
				 */

				/**
				 * [tDie_3 main ] start
				 */

				currentComponent = "tDie_3";

				try {
					globalMap.put("tDie_3_DIE_PRIORITY", 5);
					System.err.println("Erreur traitement " + jobName);

					globalMap.put("tDie_3_DIE_MESSAGE", "Erreur traitement " + jobName);
					globalMap.put("tDie_3_DIE_MESSAGES", "Erreur traitement " + jobName);

				} catch (Exception | Error e_tDie_3) {
					logIgnoredError(
							String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3),
							e_tDie_3);
				}

				currentComponent = "tDie_3";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_3_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_3++;

				/**
				 * [tDie_3 main ] stop
				 */

				/**
				 * [tDie_3 process_data_begin ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 process_data_begin ] stop
				 */

				/**
				 * [tDie_3 process_data_end ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 process_data_end ] stop
				 */

				/**
				 * [tDie_3 end ] start
				 */

				currentComponent = "tDie_3";

				ok_Hash.put("tDie_3", true);
				end_Hash.put("tDie_3", System.currentTimeMillis());

				/**
				 * [tDie_3 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_3 finally ] start
				 */

				currentComponent = "tDie_3";

				/**
				 * [tDie_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}

	public void tDie_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_4 begin ] start
				 */

				ok_Hash.put("tDie_4", false);
				start_Hash.put("tDie_4", System.currentTimeMillis());

				currentComponent = "tDie_4";

				int tos_count_tDie_4 = 0;

				/**
				 * [tDie_4 begin ] stop
				 */

				/**
				 * [tDie_4 main ] start
				 */

				currentComponent = "tDie_4";

				try {
					globalMap.put("tDie_4_DIE_PRIORITY", 5);
					System.err.println("Erreur traitement " + jobName);

					globalMap.put("tDie_4_DIE_MESSAGE", "Erreur traitement " + jobName);
					globalMap.put("tDie_4_DIE_MESSAGES", "Erreur traitement " + jobName);

				} catch (Exception | Error e_tDie_4) {
					logIgnoredError(
							String.format("tDie_4 - tDie failed to log message due to internal error: %s", e_tDie_4),
							e_tDie_4);
				}

				currentComponent = "tDie_4";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_4_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_4++;

				/**
				 * [tDie_4 main ] stop
				 */

				/**
				 * [tDie_4 process_data_begin ] start
				 */

				currentComponent = "tDie_4";

				/**
				 * [tDie_4 process_data_begin ] stop
				 */

				/**
				 * [tDie_4 process_data_end ] start
				 */

				currentComponent = "tDie_4";

				/**
				 * [tDie_4 process_data_end ] stop
				 */

				/**
				 * [tDie_4 end ] start
				 */

				currentComponent = "tDie_4";

				ok_Hash.put("tDie_4", true);
				end_Hash.put("tDie_4", System.currentTimeMillis());

				/**
				 * [tDie_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_4 finally ] start
				 */

				currentComponent = "tDie_4";

				/**
				 * [tDie_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Alimentation_Base_Oracle Alimentation_Base_OracleClass = new Alimentation_Base_Oracle();

		int exitCode = Alimentation_Base_OracleClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Alimentation_Base_Oracle.class.getClassLoader().getResourceAsStream(
					"formation_talend/alimentation_base_oracle_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Alimentation_Base_Oracle.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("postgresDatabase", "id_String");
					context.postgresDatabase = (String) context.getProperty("postgresDatabase");
					context.setContextType("postgresHost", "id_String");
					context.postgresHost = (String) context.getProperty("postgresHost");
					context.setContextType("postgresPassword", "id_Password");
					String pwd_postgresPassword_value = context.getProperty("postgresPassword");
					context.postgresPassword = null;
					if (pwd_postgresPassword_value != null) {
						if (context_param.containsKey("postgresPassword")) {// no need to decrypt if it come from
																			// program argument or parent job runtime
							context.postgresPassword = pwd_postgresPassword_value;
						} else if (!pwd_postgresPassword_value.isEmpty()) {
							try {
								context.postgresPassword = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_postgresPassword_value);
								context.put("postgresPassword", context.postgresPassword);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("postgresPort", "id_String");
					context.postgresPort = (String) context.getProperty("postgresPort");
					context.setContextType("postgresSchema", "id_String");
					context.postgresSchema = (String) context.getProperty("postgresSchema");
					context.setContextType("postgresUser", "id_String");
					context.postgresUser = (String) context.getProperty("postgresUser");
					context.setContextType("Connexion_Oracle_AdditionalParams", "id_String");
					context.Connexion_Oracle_AdditionalParams = (String) context
							.getProperty("Connexion_Oracle_AdditionalParams");
					context.setContextType("Connexion_Oracle_Login", "id_String");
					context.Connexion_Oracle_Login = (String) context.getProperty("Connexion_Oracle_Login");
					context.setContextType("Connexion_Oracle_Password", "id_Password");
					String pwd_Connexion_Oracle_Password_value = context.getProperty("Connexion_Oracle_Password");
					context.Connexion_Oracle_Password = null;
					if (pwd_Connexion_Oracle_Password_value != null) {
						if (context_param.containsKey("Connexion_Oracle_Password")) {// no need to decrypt if it come
																						// from program argument or
																						// parent job runtime
							context.Connexion_Oracle_Password = pwd_Connexion_Oracle_Password_value;
						} else if (!pwd_Connexion_Oracle_Password_value.isEmpty()) {
							try {
								context.Connexion_Oracle_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_Connexion_Oracle_Password_value);
								context.put("Connexion_Oracle_Password", context.Connexion_Oracle_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("Connexion_Oracle_Port", "id_String");
					context.Connexion_Oracle_Port = (String) context.getProperty("Connexion_Oracle_Port");
					context.setContextType("Connexion_Oracle_Schema", "id_String");
					context.Connexion_Oracle_Schema = (String) context.getProperty("Connexion_Oracle_Schema");
					context.setContextType("Connexion_Oracle_Server", "id_String");
					context.Connexion_Oracle_Server = (String) context.getProperty("Connexion_Oracle_Server");
					context.setContextType("Connexion_Oracle_Sid", "id_String");
					context.Connexion_Oracle_Sid = (String) context.getProperty("Connexion_Oracle_Sid");
					context.setContextType("Connexion_Postgres_Database", "id_String");
					context.Connexion_Postgres_Database = (String) context.getProperty("Connexion_Postgres_Database");
					context.setContextType("Connexion_Postgres_Password", "id_Password");
					String pwd_Connexion_Postgres_Password_value = context.getProperty("Connexion_Postgres_Password");
					context.Connexion_Postgres_Password = null;
					if (pwd_Connexion_Postgres_Password_value != null) {
						if (context_param.containsKey("Connexion_Postgres_Password")) {// no need to decrypt if it come
																						// from program argument or
																						// parent job runtime
							context.Connexion_Postgres_Password = pwd_Connexion_Postgres_Password_value;
						} else if (!pwd_Connexion_Postgres_Password_value.isEmpty()) {
							try {
								context.Connexion_Postgres_Password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_Connexion_Postgres_Password_value);
								context.put("Connexion_Postgres_Password", context.Connexion_Postgres_Password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("Connexion_Postgres_Login", "id_String");
					context.Connexion_Postgres_Login = (String) context.getProperty("Connexion_Postgres_Login");
					context.setContextType("Connexion_Postgres_Port", "id_String");
					context.Connexion_Postgres_Port = (String) context.getProperty("Connexion_Postgres_Port");
					context.setContextType("Connexion_Postgres_Server", "id_String");
					context.Connexion_Postgres_Server = (String) context.getProperty("Connexion_Postgres_Server");
					context.setContextType("Connexion_Postgres_Schema", "id_String");
					context.Connexion_Postgres_Schema = (String) context.getProperty("Connexion_Postgres_Schema");
					context.setContextType("Connexion_Postgres_AdditionalParams", "id_String");
					context.Connexion_Postgres_AdditionalParams = (String) context
							.getProperty("Connexion_Postgres_AdditionalParams");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("postgresDatabase")) {
				context.postgresDatabase = (String) parentContextMap.get("postgresDatabase");
			}
			if (parentContextMap.containsKey("postgresHost")) {
				context.postgresHost = (String) parentContextMap.get("postgresHost");
			}
			if (parentContextMap.containsKey("postgresPassword")) {
				context.postgresPassword = (java.lang.String) parentContextMap.get("postgresPassword");
			}
			if (parentContextMap.containsKey("postgresPort")) {
				context.postgresPort = (String) parentContextMap.get("postgresPort");
			}
			if (parentContextMap.containsKey("postgresSchema")) {
				context.postgresSchema = (String) parentContextMap.get("postgresSchema");
			}
			if (parentContextMap.containsKey("postgresUser")) {
				context.postgresUser = (String) parentContextMap.get("postgresUser");
			}
			if (parentContextMap.containsKey("Connexion_Oracle_AdditionalParams")) {
				context.Connexion_Oracle_AdditionalParams = (String) parentContextMap
						.get("Connexion_Oracle_AdditionalParams");
			}
			if (parentContextMap.containsKey("Connexion_Oracle_Login")) {
				context.Connexion_Oracle_Login = (String) parentContextMap.get("Connexion_Oracle_Login");
			}
			if (parentContextMap.containsKey("Connexion_Oracle_Password")) {
				context.Connexion_Oracle_Password = (java.lang.String) parentContextMap
						.get("Connexion_Oracle_Password");
			}
			if (parentContextMap.containsKey("Connexion_Oracle_Port")) {
				context.Connexion_Oracle_Port = (String) parentContextMap.get("Connexion_Oracle_Port");
			}
			if (parentContextMap.containsKey("Connexion_Oracle_Schema")) {
				context.Connexion_Oracle_Schema = (String) parentContextMap.get("Connexion_Oracle_Schema");
			}
			if (parentContextMap.containsKey("Connexion_Oracle_Server")) {
				context.Connexion_Oracle_Server = (String) parentContextMap.get("Connexion_Oracle_Server");
			}
			if (parentContextMap.containsKey("Connexion_Oracle_Sid")) {
				context.Connexion_Oracle_Sid = (String) parentContextMap.get("Connexion_Oracle_Sid");
			}
			if (parentContextMap.containsKey("Connexion_Postgres_Database")) {
				context.Connexion_Postgres_Database = (String) parentContextMap.get("Connexion_Postgres_Database");
			}
			if (parentContextMap.containsKey("Connexion_Postgres_Password")) {
				context.Connexion_Postgres_Password = (java.lang.String) parentContextMap
						.get("Connexion_Postgres_Password");
			}
			if (parentContextMap.containsKey("Connexion_Postgres_Login")) {
				context.Connexion_Postgres_Login = (String) parentContextMap.get("Connexion_Postgres_Login");
			}
			if (parentContextMap.containsKey("Connexion_Postgres_Port")) {
				context.Connexion_Postgres_Port = (String) parentContextMap.get("Connexion_Postgres_Port");
			}
			if (parentContextMap.containsKey("Connexion_Postgres_Server")) {
				context.Connexion_Postgres_Server = (String) parentContextMap.get("Connexion_Postgres_Server");
			}
			if (parentContextMap.containsKey("Connexion_Postgres_Schema")) {
				context.Connexion_Postgres_Schema = (String) parentContextMap.get("Connexion_Postgres_Schema");
			}
			if (parentContextMap.containsKey("Connexion_Postgres_AdditionalParams")) {
				context.Connexion_Postgres_AdditionalParams = (String) parentContextMap
						.get("Connexion_Postgres_AdditionalParams");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("postgresPassword");
		parametersToEncrypt.add("Connexion_Oracle_Password");
		parametersToEncrypt.add("Connexion_Postgres_Password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDie_1) {
			globalMap.put("tDie_1_SUBPROCESS_STATE", -1);

			e_tDie_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDie_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDie_2) {
			globalMap.put("tDie_2_SUBPROCESS_STATE", -1);

			e_tDie_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDie_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDie_3) {
			globalMap.put("tDie_3_SUBPROCESS_STATE", -1);

			e_tDie_3.printStackTrace();

		}
		try {
			errorCode = null;
			tDie_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDie_4) {
			globalMap.put("tDie_4_SUBPROCESS_STATE", -1);

			e_tDie_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Alimentation_Base_Oracle");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 203378 characters generated by Talend Open Studio for Data Integration on the
 * 25 juin 2023 20:21:46 CEST
 ************************************************************************************************/