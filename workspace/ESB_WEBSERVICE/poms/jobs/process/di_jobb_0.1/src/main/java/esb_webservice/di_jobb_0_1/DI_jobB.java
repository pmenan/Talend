// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package esb_webservice.di_jobb_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: DI_jobB Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class DI_jobB implements TalendJob, TalendESBJob, TalendESBJobFactory {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}
	private ESBEndpointRegistry registry = null;

	public void setEndpointRegistry(ESBEndpointRegistry registry) {
		this.registry = registry;
	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
		
	}

	
		public ESBEndpointInfo getEndpoint() { return null; }
	

	public TalendESBJob newTalendESBJob() {
		DI_jobB talendESBJob = new DI_jobB();
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources =
			(java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
		if (null != talendDataSources) {
			java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
			for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources.entrySet()) {
				dataSources.put(talendDataSourceEntry.getKey(), talendDataSourceEntry.getValue().getRawDataSource());
			}
			talendESBJob.setDataSources(dataSources);
		}
		// fix for TESB-7714
		talendESBJob.setEndpointRegistry(registry);

		return talendESBJob;
	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "DI_jobB";
	private final String projectName = "ESB_WEBSERVICE";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				DI_jobB.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(DI_jobB.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRouteInput_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRouteOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRouteInput_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRouteInput_1_Loop_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tRouteInput_1_In_error(exception, errorComponent, globalMap);
						
						}
					
			public void tRouteInput_1_In_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRouteInput_1_Loop_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRouteInput_1_Loop_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	
	/**
	 * Access bean implemented as inner class in order to avoid incompatible
	 * changes of existing interfaces and central code generation modules.
	 */
	public final TalendESBJobBean esbJobBean = new TalendESBJobBean() {

		/**
		 * Initialize a job for multiple exchange processing
		 * in a route.
		 *
		 * @param exchange the route message exchange
		 */
		public void prepareJob(String[] contextArgs) {
			initializeJobForRoute(contextArgs);
		}

		/**
		 * Cleanup of resources from a job for multiple
		 * message exchange processing.
		 */
		public void discardJob() {
			destroyJobForRoute();
		}

		/**
		 * Run as a single-use job
		 *
		 * @param exchangeData the data map containing the route message exchange
		 * @param contextArgs arguments passed in the context
		 */
		public void runSingleUseJob(java.util.Map<String, Object> exchangeData, String[] contextArgs) {
			singleUseRouterExchange = (org.apache.camel.Exchange) exchangeData.get("exchange");
			int success = runJobInTOS(contextArgs);
			if (success != 0) {
				throw new RuntimeException("Job execution failure - details see stderr. ");
			}
		}

		/**
		 * Run as prepared multi-use job
		 *
		 * @param exchangeData the data map containing the route message exchange
		 * @param contextArgs arguments passed in the context
		 */
		public void runPreparedJob(java.util.Map<String, Object> exchangeData, String[] contextArgs) {
			evaluateContextArgs(contextArgs);
			org.apache.camel.Exchange exchange = (org.apache.camel.Exchange) exchangeData.get("exchange");
			process(exchange);
		}

		/**
		 * Get the class of the underlying job
		 *
		 * @return the job class
		 */
		public Class<?> getJobClass() {
			return jobClass();
		}

		private void evaluateContextArgs(String[] contextArgs) {
			if (contextArgs == null) {
				return;
			}
			String lastStr = "";
			for (String arg : contextArgs) {
				if (arg.equalsIgnoreCase("--context_param")) {
					lastStr = arg;
				} else if (lastStr.equals("")) {
					evalParam(arg);
				} else {
					evalParam(lastStr + " " + arg);
					lastStr = "";
				}
			}
		}
	};

	private final JobLifecycleSemaphore lifeCycleMonitor = new JobLifecycleSemaphore();
	private org.apache.camel.Exchange singleUseRouterExchange = null;
	private boolean initialize = false;
	private static final String ROUTER_EXCHANGE = "ROUTER_EXCHANGE";

	public void process(org.apache.camel.Exchange routerExchange) {
		final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>(this.globalMap);

		try {
			globalMap.put(ROUTER_EXCHANGE, routerExchange);

			// pass DataSource
			java.util.Map<String, routines.system.TalendDataSource> talendDataSources =
				(java.util.Map<String, routines.system.TalendDataSource>) this.globalMap.get(KEY_DB_DATASOURCES);
			if (null != talendDataSources) {
				java.util.Map<String, routines.system.TalendDataSource> restDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
				for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry : talendDataSources.entrySet()) {
					restDataSources.put(talendDataSourceEntry.getKey(), new routines.system.TalendDataSource(talendDataSourceEntry.getValue().getRawDataSource()));
				}
				globalMap.put(KEY_DB_DATASOURCES, restDataSources);
			}

			this.tRouteInput_1_LoopProcess(globalMap);

		} catch (TalendException e) {
			Exception ex = e;
			while ( ex instanceof TalendException ) {
				ex = ((TalendException) ex).getException();
				ex.printStackTrace(System.out);
				
			}
			throw new RuntimeException(ex);
			
		} finally {
			// close DB connections
			try {
				java.util.Map<String, routines.system.TalendDataSource> routeDataSources =
					(java.util.Map<String, routines.system.TalendDataSource>) globalMap.get(KEY_DB_DATASOURCES);
				if (null != routeDataSources) {
					for (routines.system.TalendDataSource routeDataSource : routeDataSources.values()) {
						routeDataSource.close();
					}
				}
			} catch (Throwable e) {
				e.printStackTrace(System.err);
			}
		}

	}

	/**
	 * Initialize the job and wait for execution
	 * 
	 * @param contextArgs
	 */
	public void initializeJobForRoute(final String[] contextArgs) {
		this.execStat = false;
		this.initialize = true;

		synchronized (lifeCycleMonitor) {
			new Thread(
				new Runnable() {
					public void run() {
						runJobInTOS(contextArgs);
					}
				}
			).start();

			try {
				lifeCycleMonitor.waitForUpState();
			} catch (InterruptedException e) {
				
				throw new RuntimeException(e);
			}
		} // end synchronized
	}

	/**
	 * Wait for bean shutdown to resume and 
	 * execute the shutdown portion of runJobInTOS()
	 */
	private void holdReadyState() {
		
		initialize = false;
		
		synchronized (lifeCycleMonitor) {
			lifeCycleMonitor.signalUpState();
			try {
				lifeCycleMonitor.waitForDownState();
			} catch (InterruptedException e) {
				
				throw new RuntimeException(e);
			}
		} // end synchronized
	}

	/**
	 * Bean Destructor
	 * 
	 * Notifies the waiting thread to wrap up the job
	 */
	public void destroyJobForRoute() {
		synchronized (lifeCycleMonitor) {
			lifeCycleMonitor.signalDownState();
		} // end synchronized
	}

	private Class<?> jobClass() {
		return getClass();
	}










public static class DI_job_outputStruct implements routines.system.IPersistableRow<DI_job_outputStruct> {
    final static byte[] commonByteArrayLock_ESB_WEBSERVICE_DI_jobB = new byte[0];
    static byte[] commonByteArray_ESB_WEBSERVICE_DI_jobB = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ESB_WEBSERVICE_DI_jobB.length) {
				if(length < 1024 && commonByteArray_ESB_WEBSERVICE_DI_jobB.length == 0) {
   					commonByteArray_ESB_WEBSERVICE_DI_jobB = new byte[1024];
				} else {
   					commonByteArray_ESB_WEBSERVICE_DI_jobB = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ESB_WEBSERVICE_DI_jobB, 0, length);
			strReturn = new String(commonByteArray_ESB_WEBSERVICE_DI_jobB, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ESB_WEBSERVICE_DI_jobB) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DI_job_outputStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ESB_WEBSERVICE_DI_jobB = new byte[0];
    static byte[] commonByteArray_ESB_WEBSERVICE_DI_jobB = new byte[0];

	
			    public String body;

				public String getBody () {
					return this.body;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ESB_WEBSERVICE_DI_jobB.length) {
				if(length < 1024 && commonByteArray_ESB_WEBSERVICE_DI_jobB.length == 0) {
   					commonByteArray_ESB_WEBSERVICE_DI_jobB = new byte[1024];
				} else {
   					commonByteArray_ESB_WEBSERVICE_DI_jobB = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ESB_WEBSERVICE_DI_jobB, 0, length);
			strReturn = new String(commonByteArray_ESB_WEBSERVICE_DI_jobB, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ESB_WEBSERVICE_DI_jobB) {

        	try {

        		int length = 0;
		
					this.body = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.body,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("body="+body);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRouteInput_1_LoopProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRouteInput_1_Loop_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
DI_job_outputStruct DI_job_output = new DI_job_outputStruct();



	
	/**
	 * [tRouteInput_1_Loop begin ] start
	 */

				
			int NB_ITERATE_tRouteInput_1_In = 0; //for statistics
			

	
		
		ok_Hash.put("tRouteInput_1_Loop", false);
		start_Hash.put("tRouteInput_1_Loop", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_Loop";

	
		int tos_count_tRouteInput_1_Loop = 0;
		
						if(execStat){
							runStat.updateStatOnConnection(iterateId,0,0,"row1","DI_job_output");
						}
						
						
						

	if ( initialize ) { // To divert the initializer thread
		holdReadyState();
		return;
	}
	
	org.apache.camel.Exchange routerExchange = null != singleUseRouterExchange ? singleUseRouterExchange : (org.apache.camel.Exchange) globalMap.get(ROUTER_EXCHANGE);

 



/**
 * [tRouteInput_1_Loop begin ] stop
 */
	
	/**
	 * [tRouteInput_1_Loop main ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_Loop";

	
				resourceMap.put("inIterateVComp", true);
			

 


	tos_count_tRouteInput_1_Loop++;

/**
 * [tRouteInput_1_Loop main ] stop
 */
	
	/**
	 * [tRouteInput_1_Loop process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_Loop";

	

 



/**
 * [tRouteInput_1_Loop process_data_begin ] stop
 */
	NB_ITERATE_tRouteInput_1_In++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("Iterate", 1, "exec" + NB_ITERATE_tRouteInput_1_In);
					//Thread.sleep(1000);
				}				
			



	
	/**
	 * [tRouteOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRouteOutput_1", false);
		start_Hash.put("tRouteOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tRouteOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DI_job_output");
					}
				
		int tos_count_tRouteOutput_1 = 0;
		

 



/**
 * [tRouteOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
DI_job_outputStruct DI_job_output_tmp = new DI_job_outputStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tRouteInput_1_In begin ] start
	 */

	

	
		
		ok_Hash.put("tRouteInput_1_In", false);
		start_Hash.put("tRouteInput_1_In", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_In";

	
		int tos_count_tRouteInput_1_In = 0;
		
						resourceMap.remove("inIterateVComp");
					

 



/**
 * [tRouteInput_1_In begin ] stop
 */
	
	/**
	 * [tRouteInput_1_In main ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_In";

	
	
	

        	if(routerExchange == null){System.err.println("ERROR: No input for tRouteInput_1, You may need to start it Via a Route instead of running it directly!");row1 = null;
}else{row1.body = org.apache.camel.builder.SimpleBuilder.simple("${in.body}").evaluate(routerExchange, String.class);
}
 


	tos_count_tRouteInput_1_In++;

/**
 * [tRouteInput_1_In main ] stop
 */
	
	/**
	 * [tRouteInput_1_In process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_In";

	

 



/**
 * [tRouteInput_1_In process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

DI_job_output = null;


// # Output table : 'DI_job_output'
DI_job_output_tmp.body = row1.body+" To Job B";
DI_job_output = DI_job_output_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "DI_job_output"
if(DI_job_output != null) { 



	
	/**
	 * [tRouteOutput_1 main ] start
	 */

	

	
	
	currentComponent="tRouteOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"DI_job_output");
					}
					


// tRouterOutput code

		org.apache.camel.Exchange routerExchange_tRouteOutput_1 = routerExchange;

		                routerExchange_tRouteOutput_1.getIn().setBody(DI_job_output.body, String.class);
		            	
 


	tos_count_tRouteOutput_1++;

/**
 * [tRouteOutput_1 main ] stop
 */
	
	/**
	 * [tRouteOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRouteOutput_1";

	

 



/**
 * [tRouteOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tRouteOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRouteOutput_1";

	

 



/**
 * [tRouteOutput_1 process_data_end ] stop
 */

} // End of branch "DI_job_output"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tRouteInput_1_In process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_In";

	

 



/**
 * [tRouteInput_1_In process_data_end ] stop
 */
	
	/**
	 * [tRouteInput_1_In end ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_In";

	
						resourceMap.put("inIterateVComp", true);
					

 

ok_Hash.put("tRouteInput_1_In", true);
end_Hash.put("tRouteInput_1_In", System.currentTimeMillis());




/**
 * [tRouteInput_1_In end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tRouteOutput_1 end ] start
	 */

	

	
	
	currentComponent="tRouteOutput_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DI_job_output");
			  	}
			  	
 

ok_Hash.put("tRouteOutput_1", true);
end_Hash.put("tRouteOutput_1", System.currentTimeMillis());




/**
 * [tRouteOutput_1 end ] stop
 */






						if(execStat){
							runStat.updateStatOnConnection("Iterate", 2, "exec" + NB_ITERATE_tRouteInput_1_In);
						}				
					




	
	/**
	 * [tRouteInput_1_Loop process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_Loop";

	

 



/**
 * [tRouteInput_1_Loop process_data_end ] stop
 */
	
	/**
	 * [tRouteInput_1_Loop end ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_Loop";

	
				resourceMap.remove("inIterateVComp");
			


				if(execStat){
					runStat.updateStatOnConnection(iterateId,2,0,"row1","DI_job_output");
				}
				
				
				
 

ok_Hash.put("tRouteInput_1_Loop", true);
end_Hash.put("tRouteInput_1_Loop", System.currentTimeMillis());




/**
 * [tRouteInput_1_Loop end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRouteInput_1_Loop finally ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_Loop";

	

 



/**
 * [tRouteInput_1_Loop finally ] stop
 */

	
	/**
	 * [tRouteInput_1_In finally ] start
	 */

	

	
	
		currentVirtualComponent = "tRouteInput_1";
	
	currentComponent="tRouteInput_1_In";

	

 



/**
 * [tRouteInput_1_In finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tRouteOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tRouteOutput_1";

	

 



/**
 * [tRouteOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRouteInput_1_Loop_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final DI_jobB DI_jobBClass = new DI_jobB();

        int exitCode = DI_jobBClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = DI_jobB.class.getClassLoader().getResourceAsStream("esb_webservice/di_jobb_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = DI_jobB.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tRouteInput_1_LoopProcess(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tRouteInput_1_Loop) {
globalMap.put("tRouteInput_1_Loop_SUBPROCESS_STATE", -1);

e_tRouteInput_1_Loop.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DI_jobB");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     47170 characters generated by Talend Open Studio for ESB 
 *     on the 1 décembre 2023 12:03:27 CET
 ************************************************************************************************/