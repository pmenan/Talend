// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package icommerce_reporting.jodstypeclient_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: jOdsTypeClient Purpose: alimentation de la table type client grace au
 * données de l'ODS<br>
 * Description: alimentation de la table type client grace au données de l'ODS
 * <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class jOdsTypeClient implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (database != null) {

				this.setProperty("database", database.toString());

			}

			if (password != null) {

				this.setProperty("password", password.toString());

			}

			if (port != null) {

				this.setProperty("port", port.toString());

			}

			if (schema_params != null) {

				this.setProperty("schema_params", schema_params.toString());

			}

			if (utilisateur != null) {

				this.setProperty("utilisateur", utilisateur.toString());

			}

			if (servverName != null) {

				this.setProperty("servverName", servverName.toString());

			}

			if (additionalParam != null) {

				this.setProperty("additionalParam", additionalParam.toString());

			}

			if (schema_ods != null) {

				this.setProperty("schema_ods", schema_ods.toString());

			}

			if (masqueFichier_client != null) {

				this.setProperty("masqueFichier_client", masqueFichier_client.toString());

			}

			if (masqueFichier_typeClient != null) {

				this.setProperty("masqueFichier_typeClient", masqueFichier_typeClient.toString());

			}

			if (masqueFichier_sousCategorie != null) {

				this.setProperty("masqueFichier_sousCategorie", masqueFichier_sousCategorie.toString());

			}

			if (masqueFichier_categorie != null) {

				this.setProperty("masqueFichier_categorie", masqueFichier_categorie.toString());

			}

			if (masqueFichier_produit != null) {

				this.setProperty("masqueFichier_produit", masqueFichier_produit.toString());

			}

			if (masqueFichier_ventes != null) {

				this.setProperty("masqueFichier_ventes", masqueFichier_ventes.toString());

			}

			if (masqueFichier != null) {

				this.setProperty("masqueFichier", masqueFichier.toString());

			}

			if (fielSeparator != null) {

				this.setProperty("fielSeparator", fielSeparator.toString());

			}

			if (projectFolder != null) {

				this.setProperty("projectFolder", projectFolder.toString());

			}

			if (encodage != null) {

				this.setProperty("encodage", encodage.toString());

			}

		}

		public String database;

		public String getDatabase() {
			return this.database;
		}

		public java.lang.String password;

		public java.lang.String getPassword() {
			return this.password;
		}

		public String port;

		public String getPort() {
			return this.port;
		}

		public String schema_params;

		public String getSchema_params() {
			return this.schema_params;
		}

		public String utilisateur;

		public String getUtilisateur() {
			return this.utilisateur;
		}

		public String servverName;

		public String getServverName() {
			return this.servverName;
		}

		public String additionalParam;

		public String getAdditionalParam() {
			return this.additionalParam;
		}

		public String schema_ods;

		public String getSchema_ods() {
			return this.schema_ods;
		}

		public String masqueFichier_client;

		public String getMasqueFichier_client() {
			return this.masqueFichier_client;
		}

		public String masqueFichier_typeClient;

		public String getMasqueFichier_typeClient() {
			return this.masqueFichier_typeClient;
		}

		public String masqueFichier_sousCategorie;

		public String getMasqueFichier_sousCategorie() {
			return this.masqueFichier_sousCategorie;
		}

		public String masqueFichier_categorie;

		public String getMasqueFichier_categorie() {
			return this.masqueFichier_categorie;
		}

		public String masqueFichier_produit;

		public String getMasqueFichier_produit() {
			return this.masqueFichier_produit;
		}

		public String masqueFichier_ventes;

		public String getMasqueFichier_ventes() {
			return this.masqueFichier_ventes;
		}

		public String masqueFichier;

		public String getMasqueFichier() {
			return this.masqueFichier;
		}

		public String fielSeparator;

		public String getFielSeparator() {
			return this.fielSeparator;
		}

		public String projectFolder;

		public String getProjectFolder() {
			return this.projectFolder;
		}

		public String encodage;

		public String getEncodage() {
			return this.encodage;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "jOdsTypeClient";
	private final String projectName = "ICOMMERCE_REPORTING";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils talendLogs_LOGS = new LogCatcherUtils();
	StatCatcherUtils talendStats_STATS = new StatCatcherUtils("_eRE6EEQ9Ee60iq3e6O80wQ", "0.1");
	MetterCatcherUtils talendMeter_METTER = new MetterCatcherUtils("_eRE6EEQ9Ee60iq3e6O80wQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					jOdsTypeClient.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(jOdsTypeClient.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						talendLogs_LOGS.addMessage("Java Exception", currentComponent, 6,
								e.getClass().getName() + ":" + e.getMessage(), 1);
						talendLogs_LOGSProcess(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void Implicit_Context_Database_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		Implicit_Context_Context_error(exception, errorComponent, globalMap);

	}

	public void Implicit_Context_Context_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		Implicit_Context_Database_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStop_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tChronometerStop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tChronometerStart_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tChronometerStart_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSetGlobalVar_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendStats_STATS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendStats_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendStats_FILE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendStats_STATS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendLogs_LOGS_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendLogs_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendLogs_FILE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendLogs_LOGS_onSubJobError(exception, errorComponent, globalMap);
	}

	public void talendMeter_METTER_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		talendMeter_FILE_error(exception, errorComponent, globalMap);

	}

	public void talendMeter_FILE_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		talendMeter_METTER_onSubJobError(exception, errorComponent, globalMap);
	}

	public void Implicit_Context_Database_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStop_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tChronometerStart_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSetGlobalVar_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendStats_STATS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendLogs_LOGS_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void talendMeter_METTER_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row_Implicit_Context_DatabaseStruct
			implements routines.system.IPersistableRow<row_Implicit_Context_DatabaseStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_Implicit_Context_DatabaseStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void Implicit_Context_DatabaseProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("Implicit_Context_Database_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_Implicit_Context_DatabaseStruct row_Implicit_Context_Database = new row_Implicit_Context_DatabaseStruct();

				/**
				 * [Implicit_Context_Context begin ] start
				 */

				ok_Hash.put("Implicit_Context_Context", false);
				start_Hash.put("Implicit_Context_Context", System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_Implicit_Context_Context = 0;

				java.util.List<String> assignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_Implicit_Context_Context = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_Implicit_Context_Context = new java.util.ArrayList<String>();
				int nb_line_Implicit_Context_Context = 0;

				/**
				 * [Implicit_Context_Context begin ] stop
				 */

				/**
				 * [Implicit_Context_Database begin ] start
				 */

				ok_Hash.put("Implicit_Context_Database", false);
				start_Hash.put("Implicit_Context_Database", System.currentTimeMillis());

				currentVirtualComponent = "Implicit_Context_Database";

				currentComponent = "Implicit_Context_Database";

				int tos_count_Implicit_Context_Database = 0;

				int nb_line_Implicit_Context_Database = 0;
				java.sql.Connection conn_Implicit_Context_Database = null;
				String driverClass_Implicit_Context_Database = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_Implicit_Context_Database = java.lang.Class
						.forName(driverClass_Implicit_Context_Database);
				String dbUser_Implicit_Context_Database = context.utilisateur;

				final String decryptedPassword_Implicit_Context_Database = context.password;

				String dbPwd_Implicit_Context_Database = decryptedPassword_Implicit_Context_Database;

				String url_Implicit_Context_Database = "jdbc:postgresql://" + context.servverName + ":" + context.port
						+ "/" + context.database + "?" + context.additionalParam;

				conn_Implicit_Context_Database = java.sql.DriverManager.getConnection(url_Implicit_Context_Database,
						dbUser_Implicit_Context_Database, dbPwd_Implicit_Context_Database);

				conn_Implicit_Context_Database.setAutoCommit(false);

				java.sql.Statement stmt_Implicit_Context_Database = conn_Implicit_Context_Database.createStatement();

				String dbquery_Implicit_Context_Database = "SELECT \n  \"" + context.schema_params
						+ "\".\"CONTEXTE\".\"key\", \n  \"" + context.schema_params
						+ "\".\"CONTEXTE\".\"value\"\nFROM \"" + context.schema_params + "\".\"CONTEXTE\"";

				globalMap.put("Implicit_Context_Database_QUERY", dbquery_Implicit_Context_Database);
				java.sql.ResultSet rs_Implicit_Context_Database = null;

				try {
					rs_Implicit_Context_Database = stmt_Implicit_Context_Database
							.executeQuery(dbquery_Implicit_Context_Database);
					java.sql.ResultSetMetaData rsmd_Implicit_Context_Database = rs_Implicit_Context_Database
							.getMetaData();
					int colQtyInRs_Implicit_Context_Database = rsmd_Implicit_Context_Database.getColumnCount();

					String tmpContent_Implicit_Context_Database = null;

					while (rs_Implicit_Context_Database.next()) {
						nb_line_Implicit_Context_Database++;

						if (colQtyInRs_Implicit_Context_Database < 1) {
							row_Implicit_Context_Database.key = null;
						} else {

							row_Implicit_Context_Database.key = routines.system.JDBCUtil
									.getString(rs_Implicit_Context_Database, 1, false);
						}
						if (colQtyInRs_Implicit_Context_Database < 2) {
							row_Implicit_Context_Database.value = null;
						} else {

							row_Implicit_Context_Database.value = routines.system.JDBCUtil
									.getString(rs_Implicit_Context_Database, 2, false);
						}

						/**
						 * [Implicit_Context_Database begin ] stop
						 */

						/**
						 * [Implicit_Context_Database main ] start
						 */

						currentVirtualComponent = "Implicit_Context_Database";

						currentComponent = "Implicit_Context_Database";

						tos_count_Implicit_Context_Database++;

						/**
						 * [Implicit_Context_Database main ] stop
						 */

						/**
						 * [Implicit_Context_Database process_data_begin ] start
						 */

						currentVirtualComponent = "Implicit_Context_Database";

						currentComponent = "Implicit_Context_Database";

						/**
						 * [Implicit_Context_Database process_data_begin ] stop
						 */

						/**
						 * [Implicit_Context_Context main ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
						}

						//////////////////////////
						String tmp_key_Implicit_Context_Context = null;
						String key_Implicit_Context_Context = null;
						if (row_Implicit_Context_Database.key != null) {
							tmp_key_Implicit_Context_Context = row_Implicit_Context_Database.key.trim();
							if ((tmp_key_Implicit_Context_Context.startsWith("#")
									|| tmp_key_Implicit_Context_Context.startsWith("!"))) {
								tmp_key_Implicit_Context_Context = null;
							} else {
								row_Implicit_Context_Database.key = tmp_key_Implicit_Context_Context;
							}
						}
						if (row_Implicit_Context_Database.key != null) {
							key_Implicit_Context_Context = row_Implicit_Context_Database.key;
						}
						String value_Implicit_Context_Context = null;
						if (row_Implicit_Context_Database.value != null) {
							value_Implicit_Context_Context = row_Implicit_Context_Database.value;
						}

						String currentValue_Implicit_Context_Context = value_Implicit_Context_Context;

						if ((key_Implicit_Context_Context != null) && ("password".equals(key_Implicit_Context_Context)))
							currentValue_Implicit_Context_Context = currentValue_Implicit_Context_Context
									.replaceAll(".", "*");

						if (tmp_key_Implicit_Context_Context != null) {
							try {
								if (key_Implicit_Context_Context != null
										&& "database".equals(key_Implicit_Context_Context)) {
									context.database = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "password".equals(key_Implicit_Context_Context)) {
									context.password = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "port".equals(key_Implicit_Context_Context)) {
									context.port = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "schema_params".equals(key_Implicit_Context_Context)) {
									context.schema_params = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "utilisateur".equals(key_Implicit_Context_Context)) {
									context.utilisateur = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "servverName".equals(key_Implicit_Context_Context)) {
									context.servverName = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "additionalParam".equals(key_Implicit_Context_Context)) {
									context.additionalParam = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "schema_ods".equals(key_Implicit_Context_Context)) {
									context.schema_ods = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "masqueFichier_client".equals(key_Implicit_Context_Context)) {
									context.masqueFichier_client = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "masqueFichier_typeClient".equals(key_Implicit_Context_Context)) {
									context.masqueFichier_typeClient = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "masqueFichier_sousCategorie".equals(key_Implicit_Context_Context)) {
									context.masqueFichier_sousCategorie = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "masqueFichier_categorie".equals(key_Implicit_Context_Context)) {
									context.masqueFichier_categorie = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "masqueFichier_produit".equals(key_Implicit_Context_Context)) {
									context.masqueFichier_produit = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "masqueFichier_ventes".equals(key_Implicit_Context_Context)) {
									context.masqueFichier_ventes = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "masqueFichier".equals(key_Implicit_Context_Context)) {
									context.masqueFichier = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "fielSeparator".equals(key_Implicit_Context_Context)) {
									context.fielSeparator = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "projectFolder".equals(key_Implicit_Context_Context)) {
									context.projectFolder = value_Implicit_Context_Context;
								}

								if (key_Implicit_Context_Context != null
										&& "encodage".equals(key_Implicit_Context_Context)) {
									context.encodage = value_Implicit_Context_Context;
								}

								if (context.getProperty(key_Implicit_Context_Context) != null) {
									assignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
								} else {
									newPropertyList_Implicit_Context_Context.add(key_Implicit_Context_Context);
								}
								if (value_Implicit_Context_Context == null) {
									context.setProperty(key_Implicit_Context_Context, "");
								} else {
									context.setProperty(key_Implicit_Context_Context, value_Implicit_Context_Context);
								}
							} catch (java.lang.Exception e) {
								System.err.println("Setting a value for the key \"" + key_Implicit_Context_Context
										+ "\" has failed. Error message: " + e.getMessage());
							}
							nb_line_Implicit_Context_Context++;
						}
						//////////////////////////

						tos_count_Implicit_Context_Context++;

						/**
						 * [Implicit_Context_Context main ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_begin ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_begin ] stop
						 */

						/**
						 * [Implicit_Context_Context process_data_end ] start
						 */

						currentVirtualComponent = "Implicit_Context_Context";

						currentComponent = "Implicit_Context_Context";

						/**
						 * [Implicit_Context_Context process_data_end ] stop
						 */

						/**
						 * [Implicit_Context_Database process_data_end ] start
						 */

						currentVirtualComponent = "Implicit_Context_Database";

						currentComponent = "Implicit_Context_Database";

						/**
						 * [Implicit_Context_Database process_data_end ] stop
						 */

						/**
						 * [Implicit_Context_Database end ] start
						 */

						currentVirtualComponent = "Implicit_Context_Database";

						currentComponent = "Implicit_Context_Database";

					}
				} finally {
					if (rs_Implicit_Context_Database != null) {
						rs_Implicit_Context_Database.close();
					}
					if (stmt_Implicit_Context_Database != null) {
						stmt_Implicit_Context_Database.close();
					}
					if (conn_Implicit_Context_Database != null && !conn_Implicit_Context_Database.isClosed()) {

						conn_Implicit_Context_Database.commit();

						conn_Implicit_Context_Database.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("Implicit_Context_Database_NB_LINE", nb_line_Implicit_Context_Database);

				ok_Hash.put("Implicit_Context_Database", true);
				end_Hash.put("Implicit_Context_Database", System.currentTimeMillis());

				/**
				 * [Implicit_Context_Database end ] stop
				 */

				/**
				 * [Implicit_Context_Context end ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				java.util.Enumeration<?> enu_Implicit_Context_Context = context.propertyNames();
				while (enu_Implicit_Context_Context.hasMoreElements()) {
					String key_Implicit_Context_Context = (String) enu_Implicit_Context_Context.nextElement();
					if (!assignList_Implicit_Context_Context.contains(key_Implicit_Context_Context)
							&& !newPropertyList_Implicit_Context_Context.contains(key_Implicit_Context_Context)) {
						noAssignList_Implicit_Context_Context.add(key_Implicit_Context_Context);
					}
				}

				String newPropertyStr_Implicit_Context_Context = newPropertyList_Implicit_Context_Context.toString();
				String newProperty_Implicit_Context_Context = newPropertyStr_Implicit_Context_Context.substring(1,
						newPropertyStr_Implicit_Context_Context.length() - 1);

				String noAssignStr_Implicit_Context_Context = noAssignList_Implicit_Context_Context.toString();
				String noAssign_Implicit_Context_Context = noAssignStr_Implicit_Context_Context.substring(1,
						noAssignStr_Implicit_Context_Context.length() - 1);

				globalMap.put("Implicit_Context_Context_KEY_NOT_INCONTEXT", newProperty_Implicit_Context_Context);
				globalMap.put("Implicit_Context_Context_KEY_NOT_LOADED", noAssign_Implicit_Context_Context);

				globalMap.put("Implicit_Context_Context_NB_LINE", nb_line_Implicit_Context_Context);

				List<String> parametersToEncrypt_Implicit_Context_Context = new java.util.ArrayList<String>();

				parametersToEncrypt_Implicit_Context_Context.add("password");

				resumeUtil.addLog("NODE", "NODE:Implicit_Context_Context", "", Thread.currentThread().getId() + "", "",
						"", "", "",
						resumeUtil.convertToJsonText(context, parametersToEncrypt_Implicit_Context_Context));

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("Implicit_Context_Context", true);
				end_Hash.put("Implicit_Context_Context", System.currentTimeMillis());

				/**
				 * [Implicit_Context_Context end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [Implicit_Context_Database finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Database";

				currentComponent = "Implicit_Context_Database";

				/**
				 * [Implicit_Context_Database finally ] stop
				 */

				/**
				 * [Implicit_Context_Context finally ] start
				 */

				currentVirtualComponent = "Implicit_Context_Context";

				currentComponent = "Implicit_Context_Context";

				/**
				 * [Implicit_Context_Context finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("Implicit_Context_Database_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.projectFolder + TalendDate.getDate("YYYYMMDD");
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add(((String) globalMap.get("masque_fichier")));
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					filemask_compile_tFileList_1 = org.apache.oro.text.GlobCompiler.globToPerl5(
							filemask_tFileList_1.toCharArray(), org.apache.oro.text.GlobCompiler.DEFAULT_MASK);

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1);
					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = true;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.Set<String> filePath_tFileList_1 = new java.util.HashSet<String>();
				java.io.File file_tFileList_1 = new java.io.File(directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);
						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file.getAbsolutePath());
									}
								}
							}
						}
						return true;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".") && files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1.getName()
								.substring(files_tFileList_1.getName().lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE", currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH", currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY", currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION", currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */

					/**
					 * [tFileList_1 process_data_begin ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_begin ] stop
					 */

					/**
					 * [tFileList_1 process_data_end ] start
					 */

					currentComponent = "tFileList_1";

					/**
					 * [tFileList_1 process_data_end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				if (NB_FILEtFileList_1 == 0)
					throw new RuntimeException("No file found in directory " + directory_tFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				if (1 == ((Integer) globalMap.get("tFileList_1_NB_FILE"))) {

					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "true");
					}
					tFileInputDelimited_1Process(globalMap);
				}

				else {
					if (execStat) {
						runStat.updateStatOnConnection("If1", 0, "false");
					}
				}

				/**
				 * [tFileList_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				try {
					talendLogs_LOGS.addMessage("tDie", "tDie_1", 5, "pas de fichier dans le répertoire "
							+ context.projectFolder + TalendDate.getDate("YYYYMMDD"), 4);
					talendLogs_LOGSProcess(globalMap);

					globalMap.put("tDie_1_DIE_PRIORITY", 5);
					System.err.println("pas de fichier dans le répertoire " + context.projectFolder
							+ TalendDate.getDate("YYYYMMDD"));

					globalMap.put("tDie_1_DIE_MESSAGE", "pas de fichier dans le répertoire " + context.projectFolder
							+ TalendDate.getDate("YYYYMMDD"));
					globalMap.put("tDie_1_DIE_MESSAGES", "pas de fichier dans le répertoire " + context.projectFolder
							+ TalendDate.getDate("YYYYMMDD"));

				} catch (Exception | Error e_tDie_1) {
					logIgnoredError(
							String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1),
							e_tDie_1);
				}

				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				System.exit(4);

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 process_data_begin ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_begin ] stop
				 */

				/**
				 * [tDie_1 process_data_end ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 process_data_end ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public static class rejectNullValueStruct implements routines.system.IPersistableRow<rejectNullValueStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String LB_CHEMIN_FICHIER;

		public String getLB_CHEMIN_FICHIER() {
			return this.LB_CHEMIN_FICHIER;
		}

		public String LB_NOM_FICHIER;

		public String getLB_NOM_FICHIER() {
			return this.LB_NOM_FICHIER;
		}

		public int NUM_LIGNE_REJET;

		public int getNUM_LIGNE_REJET() {
			return this.NUM_LIGNE_REJET;
		}

		public String LB_LIGNE_REJET;

		public String getLB_LIGNE_REJET() {
			return this.LB_LIGNE_REJET;
		}

		public String LB_MESSAGE_REJET;

		public String getLB_MESSAGE_REJET() {
			return this.LB_MESSAGE_REJET;
		}

		public String LB_NOM_FLUX;

		public String getLB_NOM_FLUX() {
			return this.LB_NOM_FLUX;
		}

		public java.util.Date DT_REJET;

		public java.util.Date getDT_REJET() {
			return this.DT_REJET;
		}

		public String LB_JOB_NAME;

		public String getLB_JOB_NAME() {
			return this.LB_JOB_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.LB_CHEMIN_FICHIER == null) ? 0 : this.LB_CHEMIN_FICHIER.hashCode());

				result = prime * result + ((this.LB_NOM_FICHIER == null) ? 0 : this.LB_NOM_FICHIER.hashCode());

				result = prime * result + (int) this.NUM_LIGNE_REJET;

				result = prime * result + ((this.LB_LIGNE_REJET == null) ? 0 : this.LB_LIGNE_REJET.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final rejectNullValueStruct other = (rejectNullValueStruct) obj;

			if (this.LB_CHEMIN_FICHIER == null) {
				if (other.LB_CHEMIN_FICHIER != null)
					return false;

			} else if (!this.LB_CHEMIN_FICHIER.equals(other.LB_CHEMIN_FICHIER))

				return false;

			if (this.LB_NOM_FICHIER == null) {
				if (other.LB_NOM_FICHIER != null)
					return false;

			} else if (!this.LB_NOM_FICHIER.equals(other.LB_NOM_FICHIER))

				return false;

			if (this.NUM_LIGNE_REJET != other.NUM_LIGNE_REJET)
				return false;

			if (this.LB_LIGNE_REJET == null) {
				if (other.LB_LIGNE_REJET != null)
					return false;

			} else if (!this.LB_LIGNE_REJET.equals(other.LB_LIGNE_REJET))

				return false;

			return true;
		}

		public void copyDataTo(rejectNullValueStruct other) {

			other.LB_CHEMIN_FICHIER = this.LB_CHEMIN_FICHIER;
			other.LB_NOM_FICHIER = this.LB_NOM_FICHIER;
			other.NUM_LIGNE_REJET = this.NUM_LIGNE_REJET;
			other.LB_LIGNE_REJET = this.LB_LIGNE_REJET;
			other.LB_MESSAGE_REJET = this.LB_MESSAGE_REJET;
			other.LB_NOM_FLUX = this.LB_NOM_FLUX;
			other.DT_REJET = this.DT_REJET;
			other.LB_JOB_NAME = this.LB_JOB_NAME;

		}

		public void copyKeysDataTo(rejectNullValueStruct other) {

			other.LB_CHEMIN_FICHIER = this.LB_CHEMIN_FICHIER;
			other.LB_NOM_FICHIER = this.LB_NOM_FICHIER;
			other.NUM_LIGNE_REJET = this.NUM_LIGNE_REJET;
			other.LB_LIGNE_REJET = this.LB_LIGNE_REJET;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.LB_CHEMIN_FICHIER = readString(dis);

					this.LB_NOM_FICHIER = readString(dis);

					this.NUM_LIGNE_REJET = dis.readInt();

					this.LB_LIGNE_REJET = readString(dis);

					this.LB_MESSAGE_REJET = readString(dis);

					this.LB_NOM_FLUX = readString(dis);

					this.DT_REJET = readDate(dis);

					this.LB_JOB_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.LB_CHEMIN_FICHIER, dos);

				// String

				writeString(this.LB_NOM_FICHIER, dos);

				// int

				dos.writeInt(this.NUM_LIGNE_REJET);

				// String

				writeString(this.LB_LIGNE_REJET, dos);

				// String

				writeString(this.LB_MESSAGE_REJET, dos);

				// String

				writeString(this.LB_NOM_FLUX, dos);

				// java.util.Date

				writeDate(this.DT_REJET, dos);

				// String

				writeString(this.LB_JOB_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LB_CHEMIN_FICHIER=" + LB_CHEMIN_FICHIER);
			sb.append(",LB_NOM_FICHIER=" + LB_NOM_FICHIER);
			sb.append(",NUM_LIGNE_REJET=" + String.valueOf(NUM_LIGNE_REJET));
			sb.append(",LB_LIGNE_REJET=" + LB_LIGNE_REJET);
			sb.append(",LB_MESSAGE_REJET=" + LB_MESSAGE_REJET);
			sb.append(",LB_NOM_FLUX=" + LB_NOM_FLUX);
			sb.append(",DT_REJET=" + String.valueOf(DT_REJET));
			sb.append(",LB_JOB_NAME=" + LB_JOB_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(rejectNullValueStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LB_CHEMIN_FICHIER, other.LB_CHEMIN_FICHIER);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.LB_NOM_FICHIER, other.LB_NOM_FICHIER);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.NUM_LIGNE_REJET, other.NUM_LIGNE_REJET);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.LB_LIGNE_REJET, other.LB_LIGNE_REJET);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DuplicatesValuesStruct implements routines.system.IPersistableRow<DuplicatesValuesStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String LB_CHEMIN_FICHIER;

		public String getLB_CHEMIN_FICHIER() {
			return this.LB_CHEMIN_FICHIER;
		}

		public String LB_NOM_FICHIER;

		public String getLB_NOM_FICHIER() {
			return this.LB_NOM_FICHIER;
		}

		public int NUM_LIGNE_REJET;

		public int getNUM_LIGNE_REJET() {
			return this.NUM_LIGNE_REJET;
		}

		public String LB_LIGNE_REJET;

		public String getLB_LIGNE_REJET() {
			return this.LB_LIGNE_REJET;
		}

		public String LB_MESSAGE_REJET;

		public String getLB_MESSAGE_REJET() {
			return this.LB_MESSAGE_REJET;
		}

		public String LB_NOM_FLUX;

		public String getLB_NOM_FLUX() {
			return this.LB_NOM_FLUX;
		}

		public java.util.Date DT_REJET;

		public java.util.Date getDT_REJET() {
			return this.DT_REJET;
		}

		public String LB_JOB_NAME;

		public String getLB_JOB_NAME() {
			return this.LB_JOB_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.LB_CHEMIN_FICHIER == null) ? 0 : this.LB_CHEMIN_FICHIER.hashCode());

				result = prime * result + ((this.LB_NOM_FICHIER == null) ? 0 : this.LB_NOM_FICHIER.hashCode());

				result = prime * result + (int) this.NUM_LIGNE_REJET;

				result = prime * result + ((this.LB_LIGNE_REJET == null) ? 0 : this.LB_LIGNE_REJET.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final DuplicatesValuesStruct other = (DuplicatesValuesStruct) obj;

			if (this.LB_CHEMIN_FICHIER == null) {
				if (other.LB_CHEMIN_FICHIER != null)
					return false;

			} else if (!this.LB_CHEMIN_FICHIER.equals(other.LB_CHEMIN_FICHIER))

				return false;

			if (this.LB_NOM_FICHIER == null) {
				if (other.LB_NOM_FICHIER != null)
					return false;

			} else if (!this.LB_NOM_FICHIER.equals(other.LB_NOM_FICHIER))

				return false;

			if (this.NUM_LIGNE_REJET != other.NUM_LIGNE_REJET)
				return false;

			if (this.LB_LIGNE_REJET == null) {
				if (other.LB_LIGNE_REJET != null)
					return false;

			} else if (!this.LB_LIGNE_REJET.equals(other.LB_LIGNE_REJET))

				return false;

			return true;
		}

		public void copyDataTo(DuplicatesValuesStruct other) {

			other.LB_CHEMIN_FICHIER = this.LB_CHEMIN_FICHIER;
			other.LB_NOM_FICHIER = this.LB_NOM_FICHIER;
			other.NUM_LIGNE_REJET = this.NUM_LIGNE_REJET;
			other.LB_LIGNE_REJET = this.LB_LIGNE_REJET;
			other.LB_MESSAGE_REJET = this.LB_MESSAGE_REJET;
			other.LB_NOM_FLUX = this.LB_NOM_FLUX;
			other.DT_REJET = this.DT_REJET;
			other.LB_JOB_NAME = this.LB_JOB_NAME;

		}

		public void copyKeysDataTo(DuplicatesValuesStruct other) {

			other.LB_CHEMIN_FICHIER = this.LB_CHEMIN_FICHIER;
			other.LB_NOM_FICHIER = this.LB_NOM_FICHIER;
			other.NUM_LIGNE_REJET = this.NUM_LIGNE_REJET;
			other.LB_LIGNE_REJET = this.LB_LIGNE_REJET;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.LB_CHEMIN_FICHIER = readString(dis);

					this.LB_NOM_FICHIER = readString(dis);

					this.NUM_LIGNE_REJET = dis.readInt();

					this.LB_LIGNE_REJET = readString(dis);

					this.LB_MESSAGE_REJET = readString(dis);

					this.LB_NOM_FLUX = readString(dis);

					this.DT_REJET = readDate(dis);

					this.LB_JOB_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.LB_CHEMIN_FICHIER, dos);

				// String

				writeString(this.LB_NOM_FICHIER, dos);

				// int

				dos.writeInt(this.NUM_LIGNE_REJET);

				// String

				writeString(this.LB_LIGNE_REJET, dos);

				// String

				writeString(this.LB_MESSAGE_REJET, dos);

				// String

				writeString(this.LB_NOM_FLUX, dos);

				// java.util.Date

				writeDate(this.DT_REJET, dos);

				// String

				writeString(this.LB_JOB_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("LB_CHEMIN_FICHIER=" + LB_CHEMIN_FICHIER);
			sb.append(",LB_NOM_FICHIER=" + LB_NOM_FICHIER);
			sb.append(",NUM_LIGNE_REJET=" + String.valueOf(NUM_LIGNE_REJET));
			sb.append(",LB_LIGNE_REJET=" + LB_LIGNE_REJET);
			sb.append(",LB_MESSAGE_REJET=" + LB_MESSAGE_REJET);
			sb.append(",LB_NOM_FLUX=" + LB_NOM_FLUX);
			sb.append(",DT_REJET=" + String.valueOf(DT_REJET));
			sb.append(",LB_JOB_NAME=" + LB_JOB_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DuplicatesValuesStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.LB_CHEMIN_FICHIER, other.LB_CHEMIN_FICHIER);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.LB_NOM_FICHIER, other.LB_NOM_FICHIER);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.NUM_LIGNE_REJET, other.NUM_LIGNE_REJET);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.LB_LIGNE_REJET, other.LB_LIGNE_REJET);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class insertNewValueStruct implements routines.system.IPersistableRow<insertNewValueStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public String LB_NOM_FICHIER;

		public String getLB_NOM_FICHIER() {
			return this.LB_NOM_FICHIER;
		}

		public java.util.Date DT_INSERTION;

		public java.util.Date getDT_INSERTION() {
			return this.DT_INSERTION;
		}

		public int BL_LIGNE_ACTIVE;

		public int getBL_LIGNE_ACTIVE() {
			return this.BL_LIGNE_ACTIVE;
		}

		public String LB_JOB_NAME;

		public String getLB_JOB_NAME() {
			return this.LB_JOB_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_TYPE_CLIENT == null) ? 0 : this.CD_TYPE_CLIENT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final insertNewValueStruct other = (insertNewValueStruct) obj;

			if (this.CD_TYPE_CLIENT == null) {
				if (other.CD_TYPE_CLIENT != null)
					return false;

			} else if (!this.CD_TYPE_CLIENT.equals(other.CD_TYPE_CLIENT))

				return false;

			return true;
		}

		public void copyDataTo(insertNewValueStruct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;
			other.LB_TYPE_CLIENT = this.LB_TYPE_CLIENT;
			other.LB_NOM_FICHIER = this.LB_NOM_FICHIER;
			other.DT_INSERTION = this.DT_INSERTION;
			other.BL_LIGNE_ACTIVE = this.BL_LIGNE_ACTIVE;
			other.LB_JOB_NAME = this.LB_JOB_NAME;

		}

		public void copyKeysDataTo(insertNewValueStruct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.LB_NOM_FICHIER = readString(dis);

					this.DT_INSERTION = readDate(dis);

					this.BL_LIGNE_ACTIVE = dis.readInt();

					this.LB_JOB_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_NOM_FICHIER, dos);

				// java.util.Date

				writeDate(this.DT_INSERTION, dos);

				// int

				dos.writeInt(this.BL_LIGNE_ACTIVE);

				// String

				writeString(this.LB_JOB_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",LB_NOM_FICHIER=" + LB_NOM_FICHIER);
			sb.append(",DT_INSERTION=" + String.valueOf(DT_INSERTION));
			sb.append(",BL_LIGNE_ACTIVE=" + String.valueOf(BL_LIGNE_ACTIVE));
			sb.append(",LB_JOB_NAME=" + LB_JOB_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(insertNewValueStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_TYPE_CLIENT, other.CD_TYPE_CLIENT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class UpdateBLCurrentStruct implements routines.system.IPersistableRow<UpdateBLCurrentStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public int BL_LIGNE_ACTIVE;

		public int getBL_LIGNE_ACTIVE() {
			return this.BL_LIGNE_ACTIVE;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_TYPE_CLIENT == null) ? 0 : this.CD_TYPE_CLIENT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final UpdateBLCurrentStruct other = (UpdateBLCurrentStruct) obj;

			if (this.CD_TYPE_CLIENT == null) {
				if (other.CD_TYPE_CLIENT != null)
					return false;

			} else if (!this.CD_TYPE_CLIENT.equals(other.CD_TYPE_CLIENT))

				return false;

			return true;
		}

		public void copyDataTo(UpdateBLCurrentStruct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;
			other.BL_LIGNE_ACTIVE = this.BL_LIGNE_ACTIVE;

		}

		public void copyKeysDataTo(UpdateBLCurrentStruct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.BL_LIGNE_ACTIVE = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// int

				dos.writeInt(this.BL_LIGNE_ACTIVE);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",BL_LIGNE_ACTIVE=" + String.valueOf(BL_LIGNE_ACTIVE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(UpdateBLCurrentStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_TYPE_CLIENT, other.CD_TYPE_CLIENT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class updateExistingStruct implements routines.system.IPersistableRow<updateExistingStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public String LB_NOM_FICHIER;

		public String getLB_NOM_FICHIER() {
			return this.LB_NOM_FICHIER;
		}

		public java.util.Date DT_INSERTION;

		public java.util.Date getDT_INSERTION() {
			return this.DT_INSERTION;
		}

		public int BL_LIGNE_ACTIVE;

		public int getBL_LIGNE_ACTIVE() {
			return this.BL_LIGNE_ACTIVE;
		}

		public String LB_JOB_NAME;

		public String getLB_JOB_NAME() {
			return this.LB_JOB_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_TYPE_CLIENT == null) ? 0 : this.CD_TYPE_CLIENT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final updateExistingStruct other = (updateExistingStruct) obj;

			if (this.CD_TYPE_CLIENT == null) {
				if (other.CD_TYPE_CLIENT != null)
					return false;

			} else if (!this.CD_TYPE_CLIENT.equals(other.CD_TYPE_CLIENT))

				return false;

			return true;
		}

		public void copyDataTo(updateExistingStruct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;
			other.LB_TYPE_CLIENT = this.LB_TYPE_CLIENT;
			other.LB_NOM_FICHIER = this.LB_NOM_FICHIER;
			other.DT_INSERTION = this.DT_INSERTION;
			other.BL_LIGNE_ACTIVE = this.BL_LIGNE_ACTIVE;
			other.LB_JOB_NAME = this.LB_JOB_NAME;

		}

		public void copyKeysDataTo(updateExistingStruct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.LB_NOM_FICHIER = readString(dis);

					this.DT_INSERTION = readDate(dis);

					this.BL_LIGNE_ACTIVE = dis.readInt();

					this.LB_JOB_NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_NOM_FICHIER, dos);

				// java.util.Date

				writeDate(this.DT_INSERTION, dos);

				// int

				dos.writeInt(this.BL_LIGNE_ACTIVE);

				// String

				writeString(this.LB_JOB_NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",LB_NOM_FICHIER=" + LB_NOM_FICHIER);
			sb.append(",DT_INSERTION=" + String.valueOf(DT_INSERTION));
			sb.append(",BL_LIGNE_ACTIVE=" + String.valueOf(BL_LIGNE_ACTIVE));
			sb.append(",LB_JOB_NAME=" + LB_JOB_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(updateExistingStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_TYPE_CLIENT, other.CD_TYPE_CLIENT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public Integer SEQUENCE;

		public Integer getSEQUENCE() {
			return this.SEQUENCE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.SEQUENCE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// Integer

				writeInteger(this.SEQUENCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",SEQUENCE=" + String.valueOf(SEQUENCE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public Integer SEQUENCE;

		public Integer getSEQUENCE() {
			return this.SEQUENCE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.SEQUENCE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// Integer

				writeInteger(this.SEQUENCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",SEQUENCE=" + String.valueOf(SEQUENCE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public Integer SEQUENCE;

		public Integer getSEQUENCE() {
			return this.SEQUENCE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.SEQUENCE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// Integer

				writeInteger(this.SEQUENCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",SEQUENCE=" + String.valueOf(SEQUENCE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public Integer SEQUENCE;

		public Integer getSEQUENCE() {
			return this.SEQUENCE;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.SEQUENCE = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// Integer

				writeInteger(this.SEQUENCE, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",SEQUENCE=" + String.valueOf(SEQUENCE));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public Integer SEQUENCE;

		public Integer getSEQUENCE() {
			return this.SEQUENCE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.SEQUENCE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// Integer

				writeInteger(this.SEQUENCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",SEQUENCE=" + String.valueOf(SEQUENCE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public Integer SEQUENCE;

		public Integer getSEQUENCE() {
			return this.SEQUENCE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

					this.SEQUENCE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

				// Integer

				writeInteger(this.SEQUENCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",SEQUENCE=" + String.valueOf(SEQUENCE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

					this.LB_TYPE_CLIENT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

				// String

				writeString(this.LB_TYPE_CLIENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row2 = out1;
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				insertNewValueStruct insertNewValue = new insertNewValueStruct();
				UpdateBLCurrentStruct UpdateBLCurrent = new UpdateBLCurrentStruct();
				updateExistingStruct updateExisting = new updateExistingStruct();
				row7Struct row7 = new row7Struct();
				DuplicatesValuesStruct DuplicatesValues = new DuplicatesValuesStruct();
				row6Struct row6 = new row6Struct();
				rejectNullValueStruct rejectNullValue = new rejectNullValueStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "insertNewValue");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("ODS_TYPE_CLIENT");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("ODS_TYPE_CLIENT");
				}

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				conn_tDBOutput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"CD_TYPE_CLIENT\",\"LB_TYPE_CLIENT\",\"LB_NOM_FICHIER\",\"DT_INSERTION\",\"BL_LIGNE_ACTIVE\",\"LB_JOB_NAME\") VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "UpdateBLCurrent");
				}

				int tos_count_tDBOutput_2 = 0;

				String dbschema_tDBOutput_2 = null;
				dbschema_tDBOutput_2 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_2 = null;
				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("ODS_TYPE_CLIENT");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "\".\"" + ("ODS_TYPE_CLIENT");
				}

				int updateKeyCount_tDBOutput_2 = 1;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}
				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;
				String dbUser_tDBOutput_2 = null;

				conn_tDBOutput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;
				String update_tDBOutput_2 = "UPDATE \"" + tableName_tDBOutput_2
						+ "\" SET \"BL_LIGNE_ACTIVE\" = ? WHERE \"CD_TYPE_CLIENT\" = ?";
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(update_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "updateExisting");
				}

				int tos_count_tDBOutput_3 = 0;

				String dbschema_tDBOutput_3 = null;
				dbschema_tDBOutput_3 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_3 = null;
				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("ODS_TYPE_CLIENT");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "\".\"" + ("ODS_TYPE_CLIENT");
				}

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;
				String dbUser_tDBOutput_3 = null;

				conn_tDBOutput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;

				int count_tDBOutput_3 = 0;
				String insert_tDBOutput_3 = "INSERT INTO \"" + tableName_tDBOutput_3
						+ "\" (\"CD_TYPE_CLIENT\",\"LB_TYPE_CLIENT\",\"LB_NOM_FICHIER\",\"DT_INSERTION\",\"BL_LIGNE_ACTIVE\",\"LB_JOB_NAME\") VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				insertNewValueStruct insertNewValue_tmp = new insertNewValueStruct();
				UpdateBLCurrentStruct UpdateBLCurrent_tmp = new UpdateBLCurrentStruct();
				updateExistingStruct updateExisting_tmp = new updateExistingStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DuplicatesValues");
				}

				int tos_count_tDBOutput_5 = 0;

				String dbschema_tDBOutput_5 = null;
				dbschema_tDBOutput_5 = context.schema_ods;

				String tableName_tDBOutput_5 = null;
				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = ("ODS_REJET");
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "\".\"" + ("ODS_REJET");
				}

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;
				String dbUser_tDBOutput_5 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_5 = "jdbc:postgresql://" + context.servverName + ":" + context.port + "/"
						+ context.database + "?" + context.additionalParam;
				dbUser_tDBOutput_5 = context.utilisateur;

				final String decryptedPassword_tDBOutput_5 = context.password;

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);

				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;

				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;

				int count_tDBOutput_5 = 0;
				String insert_tDBOutput_5 = "INSERT INTO \"" + tableName_tDBOutput_5
						+ "\" (\"LB_CHEMIN_FICHIER\",\"LB_NOM_FICHIER\",\"NUM_LIGNE_REJET\",\"LB_LIGNE_REJET\",\"LB_MESSAGE_REJET\",\"LB_NOM_FLUX\",\"DT_REJET\",\"LB_JOB_NAME\") VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				DuplicatesValuesStruct DuplicatesValues_tmp = new DuplicatesValuesStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String CD_TYPE_CLIENT;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.CD_TYPE_CLIENT == null) ? 0 : this.CD_TYPE_CLIENT.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.CD_TYPE_CLIENT == null) {
							if (other.CD_TYPE_CLIENT != null)
								return false;

						} else if (!this.CD_TYPE_CLIENT.equals(other.CD_TYPE_CLIENT))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tDBOutput_4 begin ] start
				 */

				ok_Hash.put("tDBOutput_4", false);
				start_Hash.put("tDBOutput_4", System.currentTimeMillis());

				currentComponent = "tDBOutput_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "rejectNullValue");
				}

				int tos_count_tDBOutput_4 = 0;

				String dbschema_tDBOutput_4 = null;
				dbschema_tDBOutput_4 = (String) globalMap.get("schema_" + "tDBConnection_1");

				String tableName_tDBOutput_4 = null;
				if (dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
					tableName_tDBOutput_4 = ("ODS_REJET");
				} else {
					tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "\".\"" + ("ODS_REJET");
				}

				int nb_line_tDBOutput_4 = 0;
				int nb_line_update_tDBOutput_4 = 0;
				int nb_line_inserted_tDBOutput_4 = 0;
				int nb_line_deleted_tDBOutput_4 = 0;
				int nb_line_rejected_tDBOutput_4 = 0;

				int deletedCount_tDBOutput_4 = 0;
				int updatedCount_tDBOutput_4 = 0;
				int insertedCount_tDBOutput_4 = 0;
				int rejectedCount_tDBOutput_4 = 0;

				boolean whetherReject_tDBOutput_4 = false;

				java.sql.Connection conn_tDBOutput_4 = null;
				String dbUser_tDBOutput_4 = null;

				conn_tDBOutput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				int batchSize_tDBOutput_4 = 10000;
				int batchSizeCounter_tDBOutput_4 = 0;

				int count_tDBOutput_4 = 0;
				String insert_tDBOutput_4 = "INSERT INTO \"" + tableName_tDBOutput_4
						+ "\" (\"LB_CHEMIN_FICHIER\",\"LB_NOM_FICHIER\",\"NUM_LIGNE_REJET\",\"LB_LIGNE_REJET\",\"LB_MESSAGE_REJET\",\"LB_NOM_FLUX\",\"DT_REJET\",\"LB_JOB_NAME\") VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
				resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);

				/**
				 * [tDBOutput_4 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				rejectNullValueStruct rejectNullValue_tmp = new rejectNullValueStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tLogRow_1 = 0;

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = ((String) globalMap.get("tFileList_1_CURRENT_FILEPATH"));
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								((String) globalMap.get("tFileList_1_CURRENT_FILEPATH")), "ISO-8859-15",
								context.fielSeparator, "\n", true, 0, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.CD_TYPE_CLIENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.LB_TYPE_CLIENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {
							row6 = null;

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

// # Output table : 'out1'
								out1_tmp.CD_TYPE_CLIENT = row1.CD_TYPE_CLIENT;
								out1_tmp.LB_TYPE_CLIENT = row1.LB_TYPE_CLIENT;
								out1_tmp.SEQUENCE = Numeric.sequence("s1", 1, 1);
								out1 = out1_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "out1"
							if (out1 != null) {
								row6 = null;

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
								}

								row2 = out1;

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
								}

								row6 = null;
								row3 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches(
										(row2.LB_TYPE_CLIENT == null ? false : row2.LB_TYPE_CLIENT.compareTo(" ") != 0),
										"LB_TYPE_CLIENT.compareTo(\" \") != 0 failed");
								ope_tFilterRow_1.matches((// code sample : use row2 to define the condition.
// row2.columnName1.equals("foo") ||!(row2.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
								!row2.LB_TYPE_CLIENT.isEmpty()), "advanced condition failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row3 == null) {
										row3 = new row3Struct();
									}
									row3.CD_TYPE_CLIENT = row2.CD_TYPE_CLIENT;
									row3.LB_TYPE_CLIENT = row2.LB_TYPE_CLIENT;
									row3.SEQUENCE = row2.SEQUENCE;
									nb_line_ok_tFilterRow_1++;
								} else {
									if (row6 == null) {
										row6 = new row6Struct();
									}
									row6.CD_TYPE_CLIENT = row2.CD_TYPE_CLIENT;
									row6.LB_TYPE_CLIENT = row2.LB_TYPE_CLIENT;
									row6.SEQUENCE = row2.SEQUENCE;
									row6.errorMessage = ope_tFilterRow_1.getErrorMsg();
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "row3"
								if (row3 != null) {

									/**
									 * [tUniqRow_1 main ] start
									 */

									currentComponent = "tUniqRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
									}

									row7 = null;
									row4 = null;
									finder_tUniqRow_1.CD_TYPE_CLIENT = row3.CD_TYPE_CLIENT;
									finder_tUniqRow_1.hashCodeDirty = true;
									if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
										KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

										new_tUniqRow_1.CD_TYPE_CLIENT = row3.CD_TYPE_CLIENT;

										keystUniqRow_1.add(new_tUniqRow_1);
										if (row4 == null) {

											row4 = new row4Struct();
										}
										row4.CD_TYPE_CLIENT = row3.CD_TYPE_CLIENT;
										row4.LB_TYPE_CLIENT = row3.LB_TYPE_CLIENT;
										row4.SEQUENCE = row3.SEQUENCE;
										nb_uniques_tUniqRow_1++;
									} else {
										if (row7 == null) {

											row7 = new row7Struct();
										}
										row7.CD_TYPE_CLIENT = row3.CD_TYPE_CLIENT;
										row7.LB_TYPE_CLIENT = row3.LB_TYPE_CLIENT;
										row7.SEQUENCE = row3.SEQUENCE;
										nb_duplicates_tUniqRow_1++;
									}

									tos_count_tUniqRow_1++;

									/**
									 * [tUniqRow_1 main ] stop
									 */

									/**
									 * [tUniqRow_1 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_begin ] stop
									 */
// Start of branch "row4"
									if (row4 != null) {

										/**
										 * [tMap_1 main ] start
										 */

										currentComponent = "tMap_1";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_1 = false;
										boolean mainRowRejected_tMap_1 = false;

										///////////////////////////////////////////////
										// Starting Lookup Table "row5"
										///////////////////////////////////////////////

										boolean forceLooprow5 = false;

										row5Struct row5ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_1 = false;

											row5HashKey.CD_TYPE_CLIENT = row4.CD_TYPE_CLIENT;

											row5HashKey.hashCodeDirty = true;

											tHash_Lookup_row5.lookup(row5HashKey);

											if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

												rejectedInnerJoin_tMap_1 = true;

											} // G_TM_M_090

										} // G_TM_M_020

										if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G
																														// 071

											// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
											// 'row5' and it contains more one result from keys : row5.CD_TYPE_CLIENT =
											// '" + row5HashKey.CD_TYPE_CLIENT + "'");
										} // G 071

										row5Struct row5 = null;

										row5Struct fromLookup_row5 = null;
										row5 = row5Default;

										if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

											fromLookup_row5 = tHash_Lookup_row5.next();

										} // G 099

										if (fromLookup_row5 != null) {
											row5 = fromLookup_row5;
										}

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
											// ###############################
											// # Output tables

											UpdateBLCurrent = null;
											updateExisting = null;
											insertNewValue = null;

											if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'UpdateBLCurrent'
// # Filter conditions 
												if (

												!row4.LB_TYPE_CLIENT.equals(row5.LB_TYPE_CLIENT)

												) {
													UpdateBLCurrent_tmp.CD_TYPE_CLIENT = row5.CD_TYPE_CLIENT;
													UpdateBLCurrent_tmp.BL_LIGNE_ACTIVE = 0;
													UpdateBLCurrent = UpdateBLCurrent_tmp;
												} // closing filter/reject

// # Output table : 'updateExisting'
// # Filter conditions 
												if (

												!row4.LB_TYPE_CLIENT.equals(row5.LB_TYPE_CLIENT)

												) {
													updateExisting_tmp.CD_TYPE_CLIENT = row4.CD_TYPE_CLIENT;
													updateExisting_tmp.LB_TYPE_CLIENT = row4.LB_TYPE_CLIENT;
													updateExisting_tmp.LB_NOM_FICHIER = ((String) globalMap
															.get("nom_flux"));
													updateExisting_tmp.DT_INSERTION = TalendDate.getCurrentDate();
													updateExisting_tmp.BL_LIGNE_ACTIVE = 1;
													updateExisting_tmp.LB_JOB_NAME = jobName;
													updateExisting = updateExisting_tmp;
												} // closing filter/reject
											} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'insertNewValue'
// # Filter conditions 
											if (rejectedInnerJoin_tMap_1) {
												insertNewValue_tmp.CD_TYPE_CLIENT = row4.CD_TYPE_CLIENT;
												insertNewValue_tmp.LB_TYPE_CLIENT = row4.LB_TYPE_CLIENT;
												insertNewValue_tmp.LB_NOM_FICHIER = ((String) globalMap
														.get("nom_flux"));
												insertNewValue_tmp.DT_INSERTION = TalendDate.getCurrentDate();
												insertNewValue_tmp.BL_LIGNE_ACTIVE = 1;
												insertNewValue_tmp.LB_JOB_NAME = jobName;
												insertNewValue = insertNewValue_tmp;
											} // closing filter/reject
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_1 = false;

										tos_count_tMap_1++;

										/**
										 * [tMap_1 main ] stop
										 */

										/**
										 * [tMap_1 process_data_begin ] start
										 */

										currentComponent = "tMap_1";

										/**
										 * [tMap_1 process_data_begin ] stop
										 */
// Start of branch "insertNewValue"
										if (insertNewValue != null) {

											/**
											 * [tDBOutput_1 main ] start
											 */

											currentComponent = "tDBOutput_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "insertNewValue");
											}

											whetherReject_tDBOutput_1 = false;
											if (insertNewValue.CD_TYPE_CLIENT == null) {
												pstmt_tDBOutput_1.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(1, insertNewValue.CD_TYPE_CLIENT);
											}

											if (insertNewValue.LB_TYPE_CLIENT == null) {
												pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(2, insertNewValue.LB_TYPE_CLIENT);
											}

											if (insertNewValue.LB_NOM_FICHIER == null) {
												pstmt_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(3, insertNewValue.LB_NOM_FICHIER);
											}

											if (insertNewValue.DT_INSERTION != null) {
												pstmt_tDBOutput_1.setTimestamp(4,
														new java.sql.Timestamp(insertNewValue.DT_INSERTION.getTime()));
											} else {
												pstmt_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
											}

											pstmt_tDBOutput_1.setInt(5, insertNewValue.BL_LIGNE_ACTIVE);

											if (insertNewValue.LB_JOB_NAME == null) {
												pstmt_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_1.setString(6, insertNewValue.LB_JOB_NAME);
											}

											pstmt_tDBOutput_1.addBatch();
											nb_line_tDBOutput_1++;

											batchSizeCounter_tDBOutput_1++;

											if ((batchSize_tDBOutput_1 > 0)
													&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {
												try {
													int countSum_tDBOutput_1 = 0;

													for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
														countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
																: countEach_tDBOutput_1);
													}

													insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

													batchSizeCounter_tDBOutput_1 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
													java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1
															.getNextException(), sqle_tDBOutput_1 = null;
													String errormessage_tDBOutput_1;
													if (ne_tDBOutput_1 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_1 = new java.sql.SQLException(
																e_tDBOutput_1.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_1.getMessage(),
																ne_tDBOutput_1.getSQLState(),
																ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
														errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
													} else {
														errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
													}

													if (ne_tDBOutput_1 != null) {
														throw (sqle_tDBOutput_1);
													} else {
														throw (e_tDBOutput_1);
													}

												}
											}

											tos_count_tDBOutput_1++;

											/**
											 * [tDBOutput_1 main ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_1 process_data_end ] start
											 */

											currentComponent = "tDBOutput_1";

											/**
											 * [tDBOutput_1 process_data_end ] stop
											 */

										} // End of branch "insertNewValue"

// Start of branch "UpdateBLCurrent"
										if (UpdateBLCurrent != null) {

											/**
											 * [tDBOutput_2 main ] start
											 */

											currentComponent = "tDBOutput_2";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "UpdateBLCurrent");
											}

											whetherReject_tDBOutput_2 = false;
											pstmt_tDBOutput_2.setInt(1, UpdateBLCurrent.BL_LIGNE_ACTIVE);

											if (UpdateBLCurrent.CD_TYPE_CLIENT == null) {
												pstmt_tDBOutput_2.setNull(2 + count_tDBOutput_2,
														java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_2.setString(2 + count_tDBOutput_2,
														UpdateBLCurrent.CD_TYPE_CLIENT);
											}

											pstmt_tDBOutput_2.addBatch();
											nb_line_tDBOutput_2++;

											batchSizeCounter_tDBOutput_2++;

											if ((batchSize_tDBOutput_2 > 0)
													&& (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2)) {
												try {
													int countSum_tDBOutput_2 = 0;

													for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
														countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0
																: countEach_tDBOutput_2);
													}

													updatedCount_tDBOutput_2 += countSum_tDBOutput_2;

													batchSizeCounter_tDBOutput_2 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
													java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2
															.getNextException(), sqle_tDBOutput_2 = null;
													String errormessage_tDBOutput_2;
													if (ne_tDBOutput_2 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_2 = new java.sql.SQLException(
																e_tDBOutput_2.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_2.getMessage(),
																ne_tDBOutput_2.getSQLState(),
																ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
														errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
													} else {
														errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
													}

													if (ne_tDBOutput_2 != null) {
														throw (sqle_tDBOutput_2);
													} else {
														throw (e_tDBOutput_2);
													}

												}
											}

											tos_count_tDBOutput_2++;

											/**
											 * [tDBOutput_2 main ] stop
											 */

											/**
											 * [tDBOutput_2 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_2";

											/**
											 * [tDBOutput_2 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_2 process_data_end ] start
											 */

											currentComponent = "tDBOutput_2";

											/**
											 * [tDBOutput_2 process_data_end ] stop
											 */

										} // End of branch "UpdateBLCurrent"

// Start of branch "updateExisting"
										if (updateExisting != null) {

											/**
											 * [tDBOutput_3 main ] start
											 */

											currentComponent = "tDBOutput_3";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "updateExisting");
											}

											whetherReject_tDBOutput_3 = false;
											if (updateExisting.CD_TYPE_CLIENT == null) {
												pstmt_tDBOutput_3.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_3.setString(1, updateExisting.CD_TYPE_CLIENT);
											}

											if (updateExisting.LB_TYPE_CLIENT == null) {
												pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_3.setString(2, updateExisting.LB_TYPE_CLIENT);
											}

											if (updateExisting.LB_NOM_FICHIER == null) {
												pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_3.setString(3, updateExisting.LB_NOM_FICHIER);
											}

											if (updateExisting.DT_INSERTION != null) {
												pstmt_tDBOutput_3.setTimestamp(4,
														new java.sql.Timestamp(updateExisting.DT_INSERTION.getTime()));
											} else {
												pstmt_tDBOutput_3.setNull(4, java.sql.Types.TIMESTAMP);
											}

											pstmt_tDBOutput_3.setInt(5, updateExisting.BL_LIGNE_ACTIVE);

											if (updateExisting.LB_JOB_NAME == null) {
												pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_3.setString(6, updateExisting.LB_JOB_NAME);
											}

											pstmt_tDBOutput_3.addBatch();
											nb_line_tDBOutput_3++;

											batchSizeCounter_tDBOutput_3++;

											if ((batchSize_tDBOutput_3 > 0)
													&& (batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3)) {
												try {
													int countSum_tDBOutput_3 = 0;

													for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
														countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0
																: countEach_tDBOutput_3);
													}

													insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

													batchSizeCounter_tDBOutput_3 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
													java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3
															.getNextException(), sqle_tDBOutput_3 = null;
													String errormessage_tDBOutput_3;
													if (ne_tDBOutput_3 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_3 = new java.sql.SQLException(
																e_tDBOutput_3.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_3.getMessage(),
																ne_tDBOutput_3.getSQLState(),
																ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
														errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
													} else {
														errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
													}

													if (ne_tDBOutput_3 != null) {
														throw (sqle_tDBOutput_3);
													} else {
														throw (e_tDBOutput_3);
													}

												}
											}

											tos_count_tDBOutput_3++;

											/**
											 * [tDBOutput_3 main ] stop
											 */

											/**
											 * [tDBOutput_3 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_3";

											/**
											 * [tDBOutput_3 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_3 process_data_end ] start
											 */

											currentComponent = "tDBOutput_3";

											/**
											 * [tDBOutput_3 process_data_end ] stop
											 */

										} // End of branch "updateExisting"

										/**
										 * [tMap_1 process_data_end ] start
										 */

										currentComponent = "tMap_1";

										/**
										 * [tMap_1 process_data_end ] stop
										 */

									} // End of branch "row4"

// Start of branch "row7"
									if (row7 != null) {

										/**
										 * [tMap_4 main ] start
										 */

										currentComponent = "tMap_4";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_4 = false;
										boolean mainRowRejected_tMap_4 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
											// ###############################
											// # Output tables

											DuplicatesValues = null;

// # Output table : 'DuplicatesValues'
											DuplicatesValues_tmp.LB_CHEMIN_FICHIER = ((String) globalMap
													.get("tFileList_1_CURRENT_FILEPATH"));
											DuplicatesValues_tmp.LB_NOM_FICHIER = ((String) globalMap
													.get("tFileList_1_CURRENT_FILE"));
											DuplicatesValues_tmp.NUM_LIGNE_REJET = row7.SEQUENCE;
											DuplicatesValues_tmp.LB_LIGNE_REJET = row7.CD_TYPE_CLIENT + '|'
													+ row7.LB_TYPE_CLIENT;
											DuplicatesValues_tmp.LB_MESSAGE_REJET = "Valeur en double pour CD_TYPE_CLIENT";
											DuplicatesValues_tmp.LB_NOM_FLUX = ((String) globalMap.get("nom_flux"));
											DuplicatesValues_tmp.DT_REJET = TalendDate.getCurrentDate();
											DuplicatesValues_tmp.LB_JOB_NAME = jobName;
											DuplicatesValues = DuplicatesValues_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_4 = false;

										tos_count_tMap_4++;

										/**
										 * [tMap_4 main ] stop
										 */

										/**
										 * [tMap_4 process_data_begin ] start
										 */

										currentComponent = "tMap_4";

										/**
										 * [tMap_4 process_data_begin ] stop
										 */
// Start of branch "DuplicatesValues"
										if (DuplicatesValues != null) {

											/**
											 * [tDBOutput_5 main ] start
											 */

											currentComponent = "tDBOutput_5";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "DuplicatesValues");
											}

											whetherReject_tDBOutput_5 = false;
											if (DuplicatesValues.LB_CHEMIN_FICHIER == null) {
												pstmt_tDBOutput_5.setNull(1, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_5.setString(1, DuplicatesValues.LB_CHEMIN_FICHIER);
											}

											if (DuplicatesValues.LB_NOM_FICHIER == null) {
												pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_5.setString(2, DuplicatesValues.LB_NOM_FICHIER);
											}

											pstmt_tDBOutput_5.setInt(3, DuplicatesValues.NUM_LIGNE_REJET);

											if (DuplicatesValues.LB_LIGNE_REJET == null) {
												pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_5.setString(4, DuplicatesValues.LB_LIGNE_REJET);
											}

											if (DuplicatesValues.LB_MESSAGE_REJET == null) {
												pstmt_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_5.setString(5, DuplicatesValues.LB_MESSAGE_REJET);
											}

											if (DuplicatesValues.LB_NOM_FLUX == null) {
												pstmt_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_5.setString(6, DuplicatesValues.LB_NOM_FLUX);
											}

											if (DuplicatesValues.DT_REJET != null) {
												pstmt_tDBOutput_5.setTimestamp(7,
														new java.sql.Timestamp(DuplicatesValues.DT_REJET.getTime()));
											} else {
												pstmt_tDBOutput_5.setNull(7, java.sql.Types.TIMESTAMP);
											}

											if (DuplicatesValues.LB_JOB_NAME == null) {
												pstmt_tDBOutput_5.setNull(8, java.sql.Types.VARCHAR);
											} else {
												pstmt_tDBOutput_5.setString(8, DuplicatesValues.LB_JOB_NAME);
											}

											pstmt_tDBOutput_5.addBatch();
											nb_line_tDBOutput_5++;

											batchSizeCounter_tDBOutput_5++;

											if ((batchSize_tDBOutput_5 > 0)
													&& (batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5)) {
												try {
													int countSum_tDBOutput_5 = 0;

													for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
														countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																: countEach_tDBOutput_5);
													}

													insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

													batchSizeCounter_tDBOutput_5 = 0;
												} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
													java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
															.getNextException(), sqle_tDBOutput_5 = null;
													String errormessage_tDBOutput_5;
													if (ne_tDBOutput_5 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_5 = new java.sql.SQLException(
																e_tDBOutput_5.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_5.getMessage(),
																ne_tDBOutput_5.getSQLState(),
																ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
														errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
													} else {
														errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
													}

													int countSum_tDBOutput_5 = 0;
													for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
														countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																: countEach_tDBOutput_5);
													}

													insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

													System.err.println(errormessage_tDBOutput_5);

												}
											}

											commitCounter_tDBOutput_5++;
											if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
												if ((batchSize_tDBOutput_5 > 0) && (batchSizeCounter_tDBOutput_5 > 0)) {
													try {
														int countSum_tDBOutput_5 = 0;

														for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5
																.executeBatch()) {
															countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																	: countEach_tDBOutput_5);
														}

														insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

														batchSizeCounter_tDBOutput_5 = 0;
													} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
														java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5
																.getNextException(), sqle_tDBOutput_5 = null;
														String errormessage_tDBOutput_5;
														if (ne_tDBOutput_5 != null) {
															// build new exception to provide the original cause
															sqle_tDBOutput_5 = new java.sql.SQLException(
																	e_tDBOutput_5.getMessage() + "\ncaused by: "
																			+ ne_tDBOutput_5.getMessage(),
																	ne_tDBOutput_5.getSQLState(),
																	ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
															errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
														} else {
															errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
														}

														int countSum_tDBOutput_5 = 0;
														for (int countEach_tDBOutput_5 : e_tDBOutput_5
																.getUpdateCounts()) {
															countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0
																	: countEach_tDBOutput_5);
														}

														insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

														System.err.println(errormessage_tDBOutput_5);

													}
												}
												conn_tDBOutput_5.commit();

												commitCounter_tDBOutput_5 = 0;
											}

											tos_count_tDBOutput_5++;

											/**
											 * [tDBOutput_5 main ] stop
											 */

											/**
											 * [tDBOutput_5 process_data_begin ] start
											 */

											currentComponent = "tDBOutput_5";

											/**
											 * [tDBOutput_5 process_data_begin ] stop
											 */

											/**
											 * [tDBOutput_5 process_data_end ] start
											 */

											currentComponent = "tDBOutput_5";

											/**
											 * [tDBOutput_5 process_data_end ] stop
											 */

										} // End of branch "DuplicatesValues"

										/**
										 * [tMap_4 process_data_end ] start
										 */

										currentComponent = "tMap_4";

										/**
										 * [tMap_4 process_data_end ] stop
										 */

									} // End of branch "row7"

									/**
									 * [tUniqRow_1 process_data_end ] start
									 */

									currentComponent = "tUniqRow_1";

									/**
									 * [tUniqRow_1 process_data_end ] stop
									 */

								} // End of branch "row3"

// Start of branch "row6"
								if (row6 != null) {

									/**
									 * [tMap_3 main ] start
									 */

									currentComponent = "tMap_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_3 = false;
									boolean mainRowRejected_tMap_3 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
										// ###############################
										// # Output tables

										rejectNullValue = null;

// # Output table : 'rejectNullValue'
										rejectNullValue_tmp.LB_CHEMIN_FICHIER = ((String) globalMap
												.get("tFileList_1_CURRENT_FILEPATH"));
										rejectNullValue_tmp.LB_NOM_FICHIER = ((String) globalMap
												.get("tFileList_1_CURRENT_FILE"));
										rejectNullValue_tmp.NUM_LIGNE_REJET = row6.SEQUENCE;
										rejectNullValue_tmp.LB_LIGNE_REJET = row6.CD_TYPE_CLIENT + '|'
												+ row6.LB_TYPE_CLIENT;
										rejectNullValue_tmp.LB_MESSAGE_REJET = "Valeur null pour le champ LB_TYPE_CLIENT";
										rejectNullValue_tmp.LB_NOM_FLUX = ((String) globalMap.get("nom_flux"));
										rejectNullValue_tmp.DT_REJET = TalendDate.getCurrentDate();
										rejectNullValue_tmp.LB_JOB_NAME = jobName;
										rejectNullValue = rejectNullValue_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_3 = false;

									tos_count_tMap_3++;

									/**
									 * [tMap_3 main ] stop
									 */

									/**
									 * [tMap_3 process_data_begin ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_begin ] stop
									 */
// Start of branch "rejectNullValue"
									if (rejectNullValue != null) {

										/**
										 * [tDBOutput_4 main ] start
										 */

										currentComponent = "tDBOutput_4";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "rejectNullValue");
										}

										whetherReject_tDBOutput_4 = false;
										if (rejectNullValue.LB_CHEMIN_FICHIER == null) {
											pstmt_tDBOutput_4.setNull(1, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_4.setString(1, rejectNullValue.LB_CHEMIN_FICHIER);
										}

										if (rejectNullValue.LB_NOM_FICHIER == null) {
											pstmt_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_4.setString(2, rejectNullValue.LB_NOM_FICHIER);
										}

										pstmt_tDBOutput_4.setInt(3, rejectNullValue.NUM_LIGNE_REJET);

										if (rejectNullValue.LB_LIGNE_REJET == null) {
											pstmt_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_4.setString(4, rejectNullValue.LB_LIGNE_REJET);
										}

										if (rejectNullValue.LB_MESSAGE_REJET == null) {
											pstmt_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_4.setString(5, rejectNullValue.LB_MESSAGE_REJET);
										}

										if (rejectNullValue.LB_NOM_FLUX == null) {
											pstmt_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_4.setString(6, rejectNullValue.LB_NOM_FLUX);
										}

										if (rejectNullValue.DT_REJET != null) {
											pstmt_tDBOutput_4.setTimestamp(7,
													new java.sql.Timestamp(rejectNullValue.DT_REJET.getTime()));
										} else {
											pstmt_tDBOutput_4.setNull(7, java.sql.Types.TIMESTAMP);
										}

										if (rejectNullValue.LB_JOB_NAME == null) {
											pstmt_tDBOutput_4.setNull(8, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_4.setString(8, rejectNullValue.LB_JOB_NAME);
										}

										pstmt_tDBOutput_4.addBatch();
										nb_line_tDBOutput_4++;

										batchSizeCounter_tDBOutput_4++;

										if ((batchSize_tDBOutput_4 > 0)
												&& (batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4)) {
											try {
												int countSum_tDBOutput_4 = 0;

												for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
													countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
															: countEach_tDBOutput_4);
												}

												insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

												batchSizeCounter_tDBOutput_4 = 0;
											} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
												java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),
														sqle_tDBOutput_4 = null;
												String errormessage_tDBOutput_4;
												if (ne_tDBOutput_4 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_4 = new java.sql.SQLException(
															e_tDBOutput_4.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_4.getMessage(),
															ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(),
															ne_tDBOutput_4);
													errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
												} else {
													errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
												}

												int countSum_tDBOutput_4 = 0;
												for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
													countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0
															: countEach_tDBOutput_4);
												}

												insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

												System.err.println(errormessage_tDBOutput_4);

											}
										}

										tos_count_tDBOutput_4++;

										/**
										 * [tDBOutput_4 main ] stop
										 */

										/**
										 * [tDBOutput_4 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_4";

										/**
										 * [tDBOutput_4 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_4 process_data_end ] start
										 */

										currentComponent = "tDBOutput_4";

										/**
										 * [tDBOutput_4 process_data_end ] stop
										 */

									} // End of branch "rejectNullValue"

									/**
									 * [tMap_3 process_data_end ] start
									 */

									currentComponent = "tMap_3";

									/**
									 * [tMap_3 process_data_end ] stop
									 */

								} // End of branch "row6"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "out1"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) (((String) globalMap
							.get("tFileList_1_CURRENT_FILEPATH"))) instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
					java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(), sqle_tDBOutput_1 = null;
					String errormessage_tDBOutput_1;
					if (ne_tDBOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_1 = new java.sql.SQLException(
								e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
								ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
						errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
					} else {
						errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
					}

					if (ne_tDBOutput_1 != null) {
						throw (sqle_tDBOutput_1);
					} else {
						throw (e_tDBOutput_1);
					}

				}

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "insertNewValue");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					int countSum_tDBOutput_2 = 0;
					if (pstmt_tDBOutput_2 != null && batchSizeCounter_tDBOutput_2 > 0) {

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
						}

					}

					updatedCount_tDBOutput_2 += countSum_tDBOutput_2;

				} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
					java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(), sqle_tDBOutput_2 = null;
					String errormessage_tDBOutput_2;
					if (ne_tDBOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_2 = new java.sql.SQLException(
								e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
								ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
						errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
					} else {
						errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
					}

					if (ne_tDBOutput_2 != null) {
						throw (sqle_tDBOutput_2);
					} else {
						throw (e_tDBOutput_2);
					}

				}

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");
				}
				resourceMap.put("statementClosed_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "UpdateBLCurrent");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					int countSum_tDBOutput_3 = 0;
					if (pstmt_tDBOutput_3 != null && batchSizeCounter_tDBOutput_3 > 0) {

						for (int countEach_tDBOutput_3 : pstmt_tDBOutput_3.executeBatch()) {
							countSum_tDBOutput_3 += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
						}

					}

					insertedCount_tDBOutput_3 += countSum_tDBOutput_3;

				} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
					java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(), sqle_tDBOutput_3 = null;
					String errormessage_tDBOutput_3;
					if (ne_tDBOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_3 = new java.sql.SQLException(
								e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
								ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
						errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
					} else {
						errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
					}

					if (ne_tDBOutput_3 != null) {
						throw (sqle_tDBOutput_3);
					} else {
						throw (e_tDBOutput_3);
					}

				}

				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");
				}
				resourceMap.put("statementClosed_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "updateExisting");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					int countSum_tDBOutput_5 = 0;
					if (pstmt_tDBOutput_5 != null && batchSizeCounter_tDBOutput_5 > 0) {

						for (int countEach_tDBOutput_5 : pstmt_tDBOutput_5.executeBatch()) {
							countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
						}

					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

				} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
					java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(), sqle_tDBOutput_5 = null;
					String errormessage_tDBOutput_5;
					if (ne_tDBOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_5 = new java.sql.SQLException(
								e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(),
								ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
						errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
					} else {
						errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
					}

					int countSum_tDBOutput_5 = 0;
					for (int countEach_tDBOutput_5 : e_tDBOutput_5.getUpdateCounts()) {
						countSum_tDBOutput_5 += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}

					insertedCount_tDBOutput_5 += countSum_tDBOutput_5;

					System.err.println(errormessage_tDBOutput_5);

				}

				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");
				}
				resourceMap.put("statementClosed_tDBOutput_5", true);

				conn_tDBOutput_5.commit();

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DuplicatesValues");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_4 end ] start
				 */

				currentComponent = "tDBOutput_4";

				try {
					int countSum_tDBOutput_4 = 0;
					if (pstmt_tDBOutput_4 != null && batchSizeCounter_tDBOutput_4 > 0) {

						for (int countEach_tDBOutput_4 : pstmt_tDBOutput_4.executeBatch()) {
							countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
						}

					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

				} catch (java.sql.BatchUpdateException e_tDBOutput_4) {
					java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(), sqle_tDBOutput_4 = null;
					String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(
								e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(),
								ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					} else {
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}

					int countSum_tDBOutput_4 = 0;
					for (int countEach_tDBOutput_4 : e_tDBOutput_4.getUpdateCounts()) {
						countSum_tDBOutput_4 += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}

					insertedCount_tDBOutput_4 += countSum_tDBOutput_4;

					System.err.println(errormessage_tDBOutput_4);

				}

				if (pstmt_tDBOutput_4 != null) {

					pstmt_tDBOutput_4.close();
					resourceMap.remove("pstmt_tDBOutput_4");
				}
				resourceMap.put("statementClosed_tDBOutput_4", true);

				nb_line_deleted_tDBOutput_4 = nb_line_deleted_tDBOutput_4 + deletedCount_tDBOutput_4;
				nb_line_update_tDBOutput_4 = nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
				nb_line_inserted_tDBOutput_4 = nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
				nb_line_rejected_tDBOutput_4 = nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;

				globalMap.put("tDBOutput_4_NB_LINE", nb_line_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_UPDATED", nb_line_update_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_DELETED", nb_line_deleted_tDBOutput_4);
				globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "rejectNullValue");
				}

				ok_Hash.put("tDBOutput_4", true);
				end_Hash.put("tDBOutput_4", System.currentTimeMillis());

				/**
				 * [tDBOutput_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
					if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_1")) != null) {
						pstmtToClose_tDBOutput_1.close();
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
					if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_2")) != null) {
						pstmtToClose_tDBOutput_2.close();
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
					if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_3")) != null) {
						pstmtToClose_tDBOutput_3.close();
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_4 finally ] start
				 */

				currentComponent = "tDBOutput_4";

				if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
					java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
					if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap
							.remove("pstmt_tDBOutput_4")) != null) {
						pstmtToClose_tDBOutput_4.close();
					}
				}

				/**
				 * [tDBOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CD_TYPE_CLIENT;

		public String getCD_TYPE_CLIENT() {
			return this.CD_TYPE_CLIENT;
		}

		public String LB_TYPE_CLIENT;

		public String getLB_TYPE_CLIENT() {
			return this.LB_TYPE_CLIENT;
		}

		public String LB_NOM_FICHIER;

		public String getLB_NOM_FICHIER() {
			return this.LB_NOM_FICHIER;
		}

		public java.util.Date DT_INSERTION;

		public java.util.Date getDT_INSERTION() {
			return this.DT_INSERTION;
		}

		public int BL_LIGNE_ACTIVE;

		public int getBL_LIGNE_ACTIVE() {
			return this.BL_LIGNE_ACTIVE;
		}

		public String LB_JOB_NAME;

		public String getLB_JOB_NAME() {
			return this.LB_JOB_NAME;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_TYPE_CLIENT == null) ? 0 : this.CD_TYPE_CLIENT.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.CD_TYPE_CLIENT == null) {
				if (other.CD_TYPE_CLIENT != null)
					return false;

			} else if (!this.CD_TYPE_CLIENT.equals(other.CD_TYPE_CLIENT))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;
			other.LB_TYPE_CLIENT = this.LB_TYPE_CLIENT;
			other.LB_NOM_FICHIER = this.LB_NOM_FICHIER;
			other.DT_INSERTION = this.DT_INSERTION;
			other.BL_LIGNE_ACTIVE = this.BL_LIGNE_ACTIVE;
			other.LB_JOB_NAME = this.LB_JOB_NAME;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.CD_TYPE_CLIENT = this.CD_TYPE_CLIENT;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.CD_TYPE_CLIENT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_TYPE_CLIENT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.LB_TYPE_CLIENT = readString(dis, ois);

				this.LB_NOM_FICHIER = readString(dis, ois);

				this.DT_INSERTION = readDate(dis, ois);

				this.BL_LIGNE_ACTIVE = dis.readInt();

				this.LB_JOB_NAME = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.LB_TYPE_CLIENT, dos, oos);

				writeString(this.LB_NOM_FICHIER, dos, oos);

				writeDate(this.DT_INSERTION, dos, oos);

				dos.writeInt(this.BL_LIGNE_ACTIVE);

				writeString(this.LB_JOB_NAME, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_TYPE_CLIENT=" + CD_TYPE_CLIENT);
			sb.append(",LB_TYPE_CLIENT=" + LB_TYPE_CLIENT);
			sb.append(",LB_NOM_FICHIER=" + LB_NOM_FICHIER);
			sb.append(",DT_INSERTION=" + String.valueOf(DT_INSERTION));
			sb.append(",BL_LIGNE_ACTIVE=" + String.valueOf(BL_LIGNE_ACTIVE));
			sb.append(",LB_JOB_NAME=" + LB_JOB_NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_TYPE_CLIENT, other.CD_TYPE_CLIENT);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_1 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5)
				// outputs:()
				// linked node: tMap_1 - inputs:(row4,row5)
				// outputs:(insertNewValue,UpdateBLCurrent,updateExisting)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  \"" + context.database + "\".\"" + context.schema_ods
						+ "\".\"ODS_TYPE_CLIENT\".\"CD_TYPE_CLIENT\", \n  \"" + context.database + "\".\""
						+ context.schema_ods + "\".\"ODS_TYPE_CLIENT\".\"LB_TYPE_CLIENT\", \n  \"" + context.database
						+ "\".\"" + context.schema_ods + "\".\"ODS_TYPE_CLIENT\".\"LB_NOM_FICHIER\", \n  \""
						+ context.database + "\".\"" + context.schema_ods
						+ "\".\"ODS_TYPE_CLIENT\".\"DT_INSERTION\", \n  \"" + context.database + "\".\""
						+ context.schema_ods + "\".\"ODS_TYPE_CLIENT\".\"BL_LIGNE_ACTIVE\", \n  \"" + context.database
						+ "\".\"" + context.schema_ods + "\".\"ODS_TYPE_CLIENT\".\"LB_JOB_NAME\"\nFROM \""
						+ context.database + "\".\"" + context.schema_ods
						+ "\".\"ODS_TYPE_CLIENT\"\nWHERE \"BL_LIGNE_ACTIVE\" = 1;\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row5.CD_TYPE_CLIENT = null;
						} else {

							row5.CD_TYPE_CLIENT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row5.LB_TYPE_CLIENT = null;
						} else {

							row5.LB_TYPE_CLIENT = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row5.LB_NOM_FICHIER = null;
						} else {

							row5.LB_NOM_FICHIER = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row5.DT_INSERTION = null;
						} else {

							row5.DT_INSERTION = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 4);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row5.BL_LIGNE_ACTIVE = 0;
						} else {

							row5.BL_LIGNE_ACTIVE = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row5.LB_JOB_NAME = null;
						} else {

							row5.LB_JOB_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.CD_TYPE_CLIENT = row5.CD_TYPE_CLIENT;

						row5_HashRow.LB_TYPE_CLIENT = row5.LB_TYPE_CLIENT;

						row5_HashRow.LB_NOM_FICHIER = row5.LB_NOM_FICHIER;

						row5_HashRow.DT_INSERTION = row5.DT_INSERTION;

						row5_HashRow.BL_LIGNE_ACTIVE = row5.BL_LIGNE_ACTIVE;

						row5_HashRow.LB_JOB_NAME = row5.LB_JOB_NAME;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");
				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tChronometerStop_1Process(globalMap);

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tChronometerStop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStop_1 begin ] start
				 */

				ok_Hash.put("tChronometerStop_1", false);
				start_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				currentComponent = "tChronometerStop_1";

				int tos_count_tChronometerStop_1 = 0;

				long timetChronometerStop_1;

				timetChronometerStop_1 = System.currentTimeMillis() - startTime;

				Long currentTimetChronometerStop_1 = System.currentTimeMillis();
				globalMap.put("tChronometerStop_1", currentTimetChronometerStop_1);

				globalMap.put("tChronometerStop_1_STOPTIME", currentTimetChronometerStop_1);
				globalMap.put("tChronometerStop_1_DURATION", timetChronometerStop_1);

				/**
				 * [tChronometerStop_1 begin ] stop
				 */

				/**
				 * [tChronometerStop_1 main ] start
				 */

				currentComponent = "tChronometerStop_1";

				tos_count_tChronometerStop_1++;

				/**
				 * [tChronometerStop_1 main ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStop_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStop_1 end ] start
				 */

				currentComponent = "tChronometerStop_1";

				ok_Hash.put("tChronometerStop_1", true);
				end_Hash.put("tChronometerStop_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_2Process(globalMap);

				/**
				 * [tChronometerStop_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStop_1 finally ] start
				 */

				currentComponent = "tChronometerStop_1";

				/**
				 * [tChronometerStop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStop_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				int nbLigne_insert = ((Integer) globalMap.get("tDBOutput_1_NB_LINE"));
				int nbLigne_MAJ = ((Integer) globalMap.get("tDBOutput_2_NB_LINE"));
				int nbLigne_null = ((Integer) globalMap.get("tDBOutput_4_NB_LINE"));
				int nbLigne_Double = ((Integer) globalMap.get("tDBOutput_5_NB_LINE"));
				long dureeTraitement = ((Long) globalMap.get("tChronometerStop_1_DURATION"));
				java.util.Date debutTraitement = new java.util.Date(
						((Long) globalMap.get("tChronometerStop_1_STOPTIME")));
				System.out.println("----------------------------------------------------------------");
				System.out.println("Fin d'exécution : " + jobName + " : " + debutTraitement);
				System.out.println("----------------------------------------------------------------");
				System.out.println("Durée du traitement en millisicondes                      : " + dureeTraitement);
				System.out.println("Nombre de nouvelles lignes insérées                       : " + nbLigne_insert);
				System.out.println("Nombre de lignes MAJ                                      : " + nbLigne_MAJ);
				System.out.println("Nombre de ligne avec valeur null pour LB_TYPE_CLIENT      : " + nbLigne_null);
				System.out.println("Nombre de ligne avec valeur en double pour CD_TYPE_CLIENT : " + nbLigne_Double);
				System.out.println("----------------------------------------------------------------");

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 process_data_begin ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_begin ] stop
				 */

				/**
				 * [tJava_2 process_data_end ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 process_data_end ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				/**
				 * [tJava_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tChronometerStart_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tChronometerStart_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tChronometerStart_1 begin ] start
				 */

				ok_Hash.put("tChronometerStart_1", false);
				start_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				currentComponent = "tChronometerStart_1";

				int tos_count_tChronometerStart_1 = 0;

				Long currentTimetChronometerStart_1 = System.currentTimeMillis();

				globalMap.put("tChronometerStart_1", currentTimetChronometerStart_1);
				globalMap.put("tChronometerStart_1_STARTTIME", currentTimetChronometerStart_1);

				/**
				 * [tChronometerStart_1 begin ] stop
				 */

				/**
				 * [tChronometerStart_1 main ] start
				 */

				currentComponent = "tChronometerStart_1";

				tos_count_tChronometerStart_1++;

				/**
				 * [tChronometerStart_1 main ] stop
				 */

				/**
				 * [tChronometerStart_1 process_data_begin ] start
				 */

				currentComponent = "tChronometerStart_1";

				/**
				 * [tChronometerStart_1 process_data_begin ] stop
				 */

				/**
				 * [tChronometerStart_1 process_data_end ] start
				 */

				currentComponent = "tChronometerStart_1";

				/**
				 * [tChronometerStart_1 process_data_end ] stop
				 */

				/**
				 * [tChronometerStart_1 end ] start
				 */

				currentComponent = "tChronometerStart_1";

				ok_Hash.put("tChronometerStart_1", true);
				end_Hash.put("tChronometerStart_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tSetGlobalVar_1Process(globalMap);

				/**
				 * [tChronometerStart_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tChronometerStart_1 finally ] start
				 */

				currentComponent = "tChronometerStart_1";

				/**
				 * [tChronometerStart_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tChronometerStart_1_SUBPROCESS_STATE", 1);
	}

	public void tSetGlobalVar_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 main ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				globalMap.put("nom_flux", "typeClient");
				globalMap.put("masque_fichier", "ICOM_*_TYPE_CLIENT.csv");

				tos_count_tSetGlobalVar_1++;

				/**
				 * [tSetGlobalVar_1 main ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_begin ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 process_data_end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 process_data_end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_1Process(globalMap);

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSetGlobalVar_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				System.out.println("----------------------------------------------------------------");
				System.out.println("Début du job : " + jobName + " : "
						+ new java.util.Date((Long) globalMap.get("tChronometerStart_1_STARTTIME")));

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 process_data_begin ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_begin ] stop
				 */

				/**
				 * [tJava_1 process_data_end ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 process_data_end ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				/**
				 * [tJava_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String dbProperties_tDBConnection_1 = context.additionalParam;
				String url_tDBConnection_1 = "jdbc:postgresql://" + context.servverName + ":" + context.port + "/"
						+ context.database;

				if (dbProperties_tDBConnection_1 != null && !"".equals(dbProperties_tDBConnection_1.trim())) {
					url_tDBConnection_1 = url_tDBConnection_1 + "?" + dbProperties_tDBConnection_1;
				}
				String dbUser_tDBConnection_1 = context.utilisateur;

				final String decryptedPassword_tDBConnection_1 = context.password;
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				java.util.Enumeration<java.sql.Driver> drivers_tDBConnection_1 = java.sql.DriverManager.getDrivers();
				java.util.Set<String> redShiftDriverNames_tDBConnection_1 = new java.util.HashSet<String>(
						java.util.Arrays.asList("com.amazon.redshift.jdbc.Driver", "com.amazon.redshift.jdbc41.Driver",
								"com.amazon.redshift.jdbc42.Driver"));
				while (drivers_tDBConnection_1.hasMoreElements()) {
					java.sql.Driver d_tDBConnection_1 = drivers_tDBConnection_1.nextElement();
					if (redShiftDriverNames_tDBConnection_1.contains(d_tDBConnection_1.getClass().getName())) {
						try {
							java.sql.DriverManager.deregisterDriver(d_tDBConnection_1);
							java.sql.DriverManager.registerDriver(d_tDBConnection_1);
						} catch (java.lang.Exception e_tDBConnection_1) {
							// do nothing
						}
					}
				}
				String driverClass_tDBConnection_1 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tDBConnection_1", context.schema_ods);

				globalMap.put("conn_" + "tDBConnection_1", conn_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row_talendStats_STATSStruct
			implements routines.system.IPersistableRow<row_talendStats_STATSStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendStats_STATSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendStats_STATSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendStats_STATSStruct row_talendStats_STATS = new row_talendStats_STATSStruct();

				/**
				 * [talendStats_FILE begin ] start
				 */

				ok_Hash.put("talendStats_FILE", false);
				start_Hash.put("talendStats_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_talendStats_FILE = 0;

				String fileName_talendStats_FILE = "";
				fileName_talendStats_FILE = (new java.io.File(context.projectFolder + TalendDate.getDate("YYYYMMDD")
						+ "/" + "stats_file_" + TalendDate.getDate("YYYYMMDD") + ".txt")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_talendStats_FILE = null;
				String extension_talendStats_FILE = null;
				String directory_talendStats_FILE = null;
				if ((fileName_talendStats_FILE.indexOf("/") != -1)) {
					if (fileName_talendStats_FILE.lastIndexOf(".") < fileName_talendStats_FILE.lastIndexOf("/")) {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0,
								fileName_talendStats_FILE.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE.lastIndexOf("."));
					}
					directory_talendStats_FILE = fileName_talendStats_FILE.substring(0,
							fileName_talendStats_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendStats_FILE.lastIndexOf(".") != -1) {
						fullName_talendStats_FILE = fileName_talendStats_FILE.substring(0,
								fileName_talendStats_FILE.lastIndexOf("."));
						extension_talendStats_FILE = fileName_talendStats_FILE
								.substring(fileName_talendStats_FILE.lastIndexOf("."));
					} else {
						fullName_talendStats_FILE = fileName_talendStats_FILE;
						extension_talendStats_FILE = "";
					}
					directory_talendStats_FILE = "";
				}
				boolean isFileGenerated_talendStats_FILE = true;
				java.io.File filetalendStats_FILE = new java.io.File(fileName_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME", fileName_talendStats_FILE);
				if (filetalendStats_FILE.exists()) {
					isFileGenerated_talendStats_FILE = false;
				}
				int nb_line_talendStats_FILE = 0;
				int splitedFileNo_talendStats_FILE = 0;
				int currentRow_talendStats_FILE = 0;

				final String OUT_DELIM_talendStats_FILE = /** Start field talendStats_FILE:FIELDSEPARATOR */
						";"/** End field talendStats_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendStats_FILE = /** Start field talendStats_FILE:ROWSEPARATOR */
						"\n"/** End field talendStats_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendStats_FILE != null && directory_talendStats_FILE.trim().length() != 0) {
					java.io.File dir_talendStats_FILE = new java.io.File(directory_talendStats_FILE);
					if (!dir_talendStats_FILE.exists()) {
						dir_talendStats_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendStats_FILE = null;

				outtalendStats_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_talendStats_FILE, true), "ISO-8859-15"));

				resourceMap.put("out_talendStats_FILE", outtalendStats_FILE);
				resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

				/**
				 * [talendStats_FILE begin ] stop
				 */

				/**
				 * [talendStats_STATS begin ] start
				 */

				ok_Hash.put("talendStats_STATS", false);
				start_Hash.put("talendStats_STATS", System.currentTimeMillis());

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				int tos_count_talendStats_STATS = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : talendStats_STATS.getMessages()) {
					row_talendStats_STATS.pid = pid;
					row_talendStats_STATS.root_pid = rootPid;
					row_talendStats_STATS.father_pid = fatherPid;
					row_talendStats_STATS.project = projectName;
					row_talendStats_STATS.job = jobName;
					row_talendStats_STATS.context = contextStr;
					row_talendStats_STATS.origin = (scm.getOrigin() == null || scm.getOrigin().length() < 1 ? null
							: scm.getOrigin());
					row_talendStats_STATS.message = scm.getMessage();
					row_talendStats_STATS.duration = scm.getDuration();
					row_talendStats_STATS.moment = scm.getMoment();
					row_talendStats_STATS.message_type = scm.getMessageType();
					row_talendStats_STATS.job_version = scm.getJobVersion();
					row_talendStats_STATS.job_repository_id = scm.getJobId();
					row_talendStats_STATS.system_pid = scm.getSystemPid();

					/**
					 * [talendStats_STATS begin ] stop
					 */

					/**
					 * [talendStats_STATS main ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					tos_count_talendStats_STATS++;

					/**
					 * [talendStats_STATS main ] stop
					 */

					/**
					 * [talendStats_STATS process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE main ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
					}

					StringBuilder sb_talendStats_FILE = new StringBuilder();
					if (row_talendStats_STATS.moment != null) {
						sb_talendStats_FILE.append(
								FormatterUtils.format_Date(row_talendStats_STATS.moment, "yyyy-MM-dd HH:mm:ss"));
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.pid != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.father_pid != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.father_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.root_pid != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.root_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.system_pid != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.system_pid);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.project != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.project);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.job);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_repository_id != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.job_repository_id);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.job_version != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.job_version);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.context != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.context);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.origin != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.origin);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message_type != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.message_type);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.message != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.message);
					}
					sb_talendStats_FILE.append(OUT_DELIM_talendStats_FILE);
					if (row_talendStats_STATS.duration != null) {
						sb_talendStats_FILE.append(row_talendStats_STATS.duration);
					}
					sb_talendStats_FILE.append(OUT_DELIM_ROWSEP_talendStats_FILE);

					nb_line_talendStats_FILE++;
					resourceMap.put("nb_line_talendStats_FILE", nb_line_talendStats_FILE);

					outtalendStats_FILE.write(sb_talendStats_FILE.toString());

					tos_count_talendStats_FILE++;

					/**
					 * [talendStats_FILE main ] stop
					 */

					/**
					 * [talendStats_FILE process_data_begin ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_begin ] stop
					 */

					/**
					 * [talendStats_FILE process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_FILE";

					currentComponent = "talendStats_FILE";

					/**
					 * [talendStats_FILE process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS process_data_end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

					/**
					 * [talendStats_STATS process_data_end ] stop
					 */

					/**
					 * [talendStats_STATS end ] start
					 */

					currentVirtualComponent = "talendStats_STATS";

					currentComponent = "talendStats_STATS";

				}

				ok_Hash.put("talendStats_STATS", true);
				end_Hash.put("talendStats_STATS", System.currentTimeMillis());

				/**
				 * [talendStats_STATS end ] stop
				 */

				/**
				 * [talendStats_FILE end ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (outtalendStats_FILE != null) {
					outtalendStats_FILE.flush();
					outtalendStats_FILE.close();
				}

				globalMap.put("talendStats_FILE_NB_LINE", nb_line_talendStats_FILE);
				globalMap.put("talendStats_FILE_FILE_NAME", fileName_talendStats_FILE);

				resourceMap.put("finish_talendStats_FILE", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("talendStats_FILE", true);
				end_Hash.put("talendStats_FILE", System.currentTimeMillis());

				/**
				 * [talendStats_FILE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendStats_STATS finally ] start
				 */

				currentVirtualComponent = "talendStats_STATS";

				currentComponent = "talendStats_STATS";

				/**
				 * [talendStats_STATS finally ] stop
				 */

				/**
				 * [talendStats_FILE finally ] start
				 */

				currentVirtualComponent = "talendStats_FILE";

				currentComponent = "talendStats_FILE";

				if (resourceMap.get("finish_talendStats_FILE") == null) {

					java.io.Writer outtalendStats_FILE = (java.io.Writer) resourceMap.get("out_talendStats_FILE");
					if (outtalendStats_FILE != null) {
						outtalendStats_FILE.flush();
						outtalendStats_FILE.close();
					}

				}

				/**
				 * [talendStats_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendStats_STATS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendLogs_LOGSStruct
			implements routines.system.IPersistableRow<row_talendLogs_LOGSStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendLogs_LOGSStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendLogs_LOGSProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendLogs_LOGSStruct row_talendLogs_LOGS = new row_talendLogs_LOGSStruct();

				/**
				 * [talendLogs_FILE begin ] start
				 */

				ok_Hash.put("talendLogs_FILE", false);
				start_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_talendLogs_FILE = 0;

				String fileName_talendLogs_FILE = "";
				fileName_talendLogs_FILE = (new java.io.File(context.projectFolder + TalendDate.getDate("YYYYMMDD")
						+ "/" + "logs_file_" + TalendDate.getDate("YYYYMMDD") + ".txt")).getAbsolutePath().replace("\\",
								"/");
				String fullName_talendLogs_FILE = null;
				String extension_talendLogs_FILE = null;
				String directory_talendLogs_FILE = null;
				if ((fileName_talendLogs_FILE.indexOf("/") != -1)) {
					if (fileName_talendLogs_FILE.lastIndexOf(".") < fileName_talendLogs_FILE.lastIndexOf("/")) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0,
								fileName_talendLogs_FILE.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE.lastIndexOf("."));
					}
					directory_talendLogs_FILE = fileName_talendLogs_FILE.substring(0,
							fileName_talendLogs_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendLogs_FILE.lastIndexOf(".") != -1) {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE.substring(0,
								fileName_talendLogs_FILE.lastIndexOf("."));
						extension_talendLogs_FILE = fileName_talendLogs_FILE
								.substring(fileName_talendLogs_FILE.lastIndexOf("."));
					} else {
						fullName_talendLogs_FILE = fileName_talendLogs_FILE;
						extension_talendLogs_FILE = "";
					}
					directory_talendLogs_FILE = "";
				}
				boolean isFileGenerated_talendLogs_FILE = true;
				java.io.File filetalendLogs_FILE = new java.io.File(fileName_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME", fileName_talendLogs_FILE);
				if (filetalendLogs_FILE.exists()) {
					isFileGenerated_talendLogs_FILE = false;
				}
				int nb_line_talendLogs_FILE = 0;
				int splitedFileNo_talendLogs_FILE = 0;
				int currentRow_talendLogs_FILE = 0;

				final String OUT_DELIM_talendLogs_FILE = /** Start field talendLogs_FILE:FIELDSEPARATOR */
						";"/** End field talendLogs_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendLogs_FILE = /** Start field talendLogs_FILE:ROWSEPARATOR */
						"\n"/** End field talendLogs_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendLogs_FILE != null && directory_talendLogs_FILE.trim().length() != 0) {
					java.io.File dir_talendLogs_FILE = new java.io.File(directory_talendLogs_FILE);
					if (!dir_talendLogs_FILE.exists()) {
						dir_talendLogs_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendLogs_FILE = null;

				outtalendLogs_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_talendLogs_FILE, true), "ISO-8859-15"));

				resourceMap.put("out_talendLogs_FILE", outtalendLogs_FILE);
				resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

				/**
				 * [talendLogs_FILE begin ] stop
				 */

				/**
				 * [talendLogs_LOGS begin ] start
				 */

				ok_Hash.put("talendLogs_LOGS", false);
				start_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				int tos_count_talendLogs_LOGS = 0;

				try {
					for (LogCatcherUtils.LogCatcherMessage lcm : talendLogs_LOGS.getMessages()) {
						row_talendLogs_LOGS.type = lcm.getType();
						row_talendLogs_LOGS.origin = (lcm.getOrigin() == null || lcm.getOrigin().length() < 1 ? null
								: lcm.getOrigin());
						row_talendLogs_LOGS.priority = lcm.getPriority();
						row_talendLogs_LOGS.message = lcm.getMessage();
						row_talendLogs_LOGS.code = lcm.getCode();

						row_talendLogs_LOGS.moment = java.util.Calendar.getInstance().getTime();

						row_talendLogs_LOGS.pid = pid;
						row_talendLogs_LOGS.root_pid = rootPid;
						row_talendLogs_LOGS.father_pid = fatherPid;

						row_talendLogs_LOGS.project = projectName;
						row_talendLogs_LOGS.job = jobName;
						row_talendLogs_LOGS.context = contextStr;

						/**
						 * [talendLogs_LOGS begin ] stop
						 */

						/**
						 * [talendLogs_LOGS main ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						tos_count_talendLogs_LOGS++;

						/**
						 * [talendLogs_LOGS main ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE main ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
						}

						StringBuilder sb_talendLogs_FILE = new StringBuilder();
						if (row_talendLogs_LOGS.moment != null) {
							sb_talendLogs_FILE.append(
									FormatterUtils.format_Date(row_talendLogs_LOGS.moment, "yyyy-MM-dd HH:mm:ss"));
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.root_pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.root_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.father_pid != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.father_pid);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.project != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.project);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.job != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.job);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.context != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.context);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.priority != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.priority);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.type != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.type);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.origin != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.origin);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.message != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.message);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_talendLogs_FILE);
						if (row_talendLogs_LOGS.code != null) {
							sb_talendLogs_FILE.append(row_talendLogs_LOGS.code);
						}
						sb_talendLogs_FILE.append(OUT_DELIM_ROWSEP_talendLogs_FILE);

						nb_line_talendLogs_FILE++;
						resourceMap.put("nb_line_talendLogs_FILE", nb_line_talendLogs_FILE);

						outtalendLogs_FILE.write(sb_talendLogs_FILE.toString());

						tos_count_talendLogs_FILE++;

						/**
						 * [talendLogs_FILE main ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_begin ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_begin ] stop
						 */

						/**
						 * [talendLogs_FILE process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_FILE";

						currentComponent = "talendLogs_FILE";

						/**
						 * [talendLogs_FILE process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS process_data_end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

						/**
						 * [talendLogs_LOGS process_data_end ] stop
						 */

						/**
						 * [talendLogs_LOGS end ] start
						 */

						currentVirtualComponent = "talendLogs_LOGS";

						currentComponent = "talendLogs_LOGS";

					}
				} catch (Exception e_talendLogs_LOGS) {
					logIgnoredError(String.format(
							"talendLogs_LOGS - tLogCatcher failed to process log message(s) due to internal error: %s",
							e_talendLogs_LOGS), e_talendLogs_LOGS);
				}

				ok_Hash.put("talendLogs_LOGS", true);
				end_Hash.put("talendLogs_LOGS", System.currentTimeMillis());

				/**
				 * [talendLogs_LOGS end ] stop
				 */

				/**
				 * [talendLogs_FILE end ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (outtalendLogs_FILE != null) {
					outtalendLogs_FILE.flush();
					outtalendLogs_FILE.close();
				}

				globalMap.put("talendLogs_FILE_NB_LINE", nb_line_talendLogs_FILE);
				globalMap.put("talendLogs_FILE_FILE_NAME", fileName_talendLogs_FILE);

				resourceMap.put("finish_talendLogs_FILE", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("talendLogs_FILE", true);
				end_Hash.put("talendLogs_FILE", System.currentTimeMillis());

				/**
				 * [talendLogs_FILE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendLogs_LOGS finally ] start
				 */

				currentVirtualComponent = "talendLogs_LOGS";

				currentComponent = "talendLogs_LOGS";

				/**
				 * [talendLogs_LOGS finally ] stop
				 */

				/**
				 * [talendLogs_FILE finally ] start
				 */

				currentVirtualComponent = "talendLogs_FILE";

				currentComponent = "talendLogs_FILE";

				if (resourceMap.get("finish_talendLogs_FILE") == null) {

					java.io.Writer outtalendLogs_FILE = (java.io.Writer) resourceMap.get("out_talendLogs_FILE");
					if (outtalendLogs_FILE != null) {
						outtalendLogs_FILE.flush();
						outtalendLogs_FILE.close();
					}

				}

				/**
				 * [talendLogs_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendLogs_LOGS_SUBPROCESS_STATE", 1);
	}

	public static class row_talendMeter_METTERStruct
			implements routines.system.IPersistableRow<row_talendMeter_METTERStruct> {
		final static byte[] commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];
		static byte[] commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String label;

		public String getLabel() {
			return this.label;
		}

		public Integer count;

		public Integer getCount() {
			return this.count;
		}

		public Integer reference;

		public Integer getReference() {
			return this.reference;
		}

		public String thresholds;

		public String getThresholds() {
			return this.thresholds;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length) {
					if (length < 1024 && commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient.length == 0) {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[1024];
					} else {
						commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length);
				strReturn = new String(commonByteArray_ICOMMERCE_REPORTING_jOdsTypeClient, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ICOMMERCE_REPORTING_jOdsTypeClient) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.label = readString(dis);

					this.count = readInteger(dis);

					this.reference = readInteger(dis);

					this.thresholds = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.label, dos);

				// Integer

				writeInteger(this.count, dos);

				// Integer

				writeInteger(this.reference, dos);

				// String

				writeString(this.thresholds, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",label=" + label);
			sb.append(",count=" + String.valueOf(count));
			sb.append(",reference=" + String.valueOf(reference));
			sb.append(",thresholds=" + thresholds);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row_talendMeter_METTERStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void talendMeter_METTERProcess(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row_talendMeter_METTERStruct row_talendMeter_METTER = new row_talendMeter_METTERStruct();

				/**
				 * [talendMeter_FILE begin ] start
				 */

				ok_Hash.put("talendMeter_FILE", false);
				start_Hash.put("talendMeter_FILE", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_FILE";

				currentComponent = "talendMeter_FILE";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Main");
				}

				int tos_count_talendMeter_FILE = 0;

				String fileName_talendMeter_FILE = "";
				fileName_talendMeter_FILE = (new java.io.File(context.projectFolder + TalendDate.getDate("YYYYMMDD")
						+ "/" + "meter_file_" + TalendDate.getDate("YYYYMMDD") + ".txt")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_talendMeter_FILE = null;
				String extension_talendMeter_FILE = null;
				String directory_talendMeter_FILE = null;
				if ((fileName_talendMeter_FILE.indexOf("/") != -1)) {
					if (fileName_talendMeter_FILE.lastIndexOf(".") < fileName_talendMeter_FILE.lastIndexOf("/")) {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE;
						extension_talendMeter_FILE = "";
					} else {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0,
								fileName_talendMeter_FILE.lastIndexOf("."));
						extension_talendMeter_FILE = fileName_talendMeter_FILE
								.substring(fileName_talendMeter_FILE.lastIndexOf("."));
					}
					directory_talendMeter_FILE = fileName_talendMeter_FILE.substring(0,
							fileName_talendMeter_FILE.lastIndexOf("/"));
				} else {
					if (fileName_talendMeter_FILE.lastIndexOf(".") != -1) {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE.substring(0,
								fileName_talendMeter_FILE.lastIndexOf("."));
						extension_talendMeter_FILE = fileName_talendMeter_FILE
								.substring(fileName_talendMeter_FILE.lastIndexOf("."));
					} else {
						fullName_talendMeter_FILE = fileName_talendMeter_FILE;
						extension_talendMeter_FILE = "";
					}
					directory_talendMeter_FILE = "";
				}
				boolean isFileGenerated_talendMeter_FILE = true;
				java.io.File filetalendMeter_FILE = new java.io.File(fileName_talendMeter_FILE);
				globalMap.put("talendMeter_FILE_FILE_NAME", fileName_talendMeter_FILE);
				if (filetalendMeter_FILE.exists()) {
					isFileGenerated_talendMeter_FILE = false;
				}
				int nb_line_talendMeter_FILE = 0;
				int splitedFileNo_talendMeter_FILE = 0;
				int currentRow_talendMeter_FILE = 0;

				final String OUT_DELIM_talendMeter_FILE = /** Start field talendMeter_FILE:FIELDSEPARATOR */
						";"/** End field talendMeter_FILE:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_talendMeter_FILE = /** Start field talendMeter_FILE:ROWSEPARATOR */
						"\n"/** End field talendMeter_FILE:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_talendMeter_FILE != null && directory_talendMeter_FILE.trim().length() != 0) {
					java.io.File dir_talendMeter_FILE = new java.io.File(directory_talendMeter_FILE);
					if (!dir_talendMeter_FILE.exists()) {
						dir_talendMeter_FILE.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtalendMeter_FILE = null;

				outtalendMeter_FILE = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_talendMeter_FILE, true), "ISO-8859-15"));

				resourceMap.put("out_talendMeter_FILE", outtalendMeter_FILE);
				resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

				/**
				 * [talendMeter_FILE begin ] stop
				 */

				/**
				 * [talendMeter_METTER begin ] start
				 */

				ok_Hash.put("talendMeter_METTER", false);
				start_Hash.put("talendMeter_METTER", System.currentTimeMillis());

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				int tos_count_talendMeter_METTER = 0;

				for (MetterCatcherUtils.MetterCatcherMessage mcm : talendMeter_METTER.getMessages()) {
					row_talendMeter_METTER.pid = pid;
					row_talendMeter_METTER.root_pid = rootPid;
					row_talendMeter_METTER.father_pid = fatherPid;
					row_talendMeter_METTER.project = projectName;
					row_talendMeter_METTER.job = jobName;
					row_talendMeter_METTER.context = contextStr;
					row_talendMeter_METTER.origin = (mcm.getOrigin() == null || mcm.getOrigin().length() < 1 ? null
							: mcm.getOrigin());
					row_talendMeter_METTER.moment = mcm.getMoment();
					row_talendMeter_METTER.job_version = mcm.getJobVersion();
					row_talendMeter_METTER.job_repository_id = mcm.getJobId();
					row_talendMeter_METTER.system_pid = mcm.getSystemPid();
					row_talendMeter_METTER.label = mcm.getLabel();
					row_talendMeter_METTER.count = mcm.getCount();
					row_talendMeter_METTER.reference = talendMeter_METTER
							.getConnLinesCount(mcm.getReferense() + "_count");
					row_talendMeter_METTER.thresholds = mcm.getThresholds();

					/**
					 * [talendMeter_METTER begin ] stop
					 */

					/**
					 * [talendMeter_METTER main ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					tos_count_talendMeter_METTER++;

					/**
					 * [talendMeter_METTER main ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_begin ] stop
					 */

					/**
					 * [talendMeter_FILE main ] start
					 */

					currentVirtualComponent = "talendMeter_FILE";

					currentComponent = "talendMeter_FILE";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "Main");
					}

					StringBuilder sb_talendMeter_FILE = new StringBuilder();
					if (row_talendMeter_METTER.moment != null) {
						sb_talendMeter_FILE.append(
								FormatterUtils.format_Date(row_talendMeter_METTER.moment, "yyyy-MM-dd HH:mm:ss"));
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.pid != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.father_pid != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.father_pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.root_pid != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.root_pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.system_pid != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.system_pid);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.project != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.project);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.job != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.job);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.job_repository_id != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.job_repository_id);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.job_version != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.job_version);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.context != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.context);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.origin != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.origin);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.label != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.label);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.count != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.count);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.reference != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.reference);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_talendMeter_FILE);
					if (row_talendMeter_METTER.thresholds != null) {
						sb_talendMeter_FILE.append(row_talendMeter_METTER.thresholds);
					}
					sb_talendMeter_FILE.append(OUT_DELIM_ROWSEP_talendMeter_FILE);

					nb_line_talendMeter_FILE++;
					resourceMap.put("nb_line_talendMeter_FILE", nb_line_talendMeter_FILE);

					outtalendMeter_FILE.write(sb_talendMeter_FILE.toString());

					tos_count_talendMeter_FILE++;

					/**
					 * [talendMeter_FILE main ] stop
					 */

					/**
					 * [talendMeter_FILE process_data_begin ] start
					 */

					currentVirtualComponent = "talendMeter_FILE";

					currentComponent = "talendMeter_FILE";

					/**
					 * [talendMeter_FILE process_data_begin ] stop
					 */

					/**
					 * [talendMeter_FILE process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_FILE";

					currentComponent = "talendMeter_FILE";

					/**
					 * [talendMeter_FILE process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER process_data_end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

					/**
					 * [talendMeter_METTER process_data_end ] stop
					 */

					/**
					 * [talendMeter_METTER end ] start
					 */

					currentVirtualComponent = "talendMeter_METTER";

					currentComponent = "talendMeter_METTER";

				}

				ok_Hash.put("talendMeter_METTER", true);
				end_Hash.put("talendMeter_METTER", System.currentTimeMillis());

				/**
				 * [talendMeter_METTER end ] stop
				 */

				/**
				 * [talendMeter_FILE end ] start
				 */

				currentVirtualComponent = "talendMeter_FILE";

				currentComponent = "talendMeter_FILE";

				if (outtalendMeter_FILE != null) {
					outtalendMeter_FILE.flush();
					outtalendMeter_FILE.close();
				}

				globalMap.put("talendMeter_FILE_NB_LINE", nb_line_talendMeter_FILE);
				globalMap.put("talendMeter_FILE_FILE_NAME", fileName_talendMeter_FILE);

				resourceMap.put("finish_talendMeter_FILE", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Main");
				}

				ok_Hash.put("talendMeter_FILE", true);
				end_Hash.put("talendMeter_FILE", System.currentTimeMillis());

				/**
				 * [talendMeter_FILE end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [talendMeter_METTER finally ] start
				 */

				currentVirtualComponent = "talendMeter_METTER";

				currentComponent = "talendMeter_METTER";

				/**
				 * [talendMeter_METTER finally ] stop
				 */

				/**
				 * [talendMeter_FILE finally ] start
				 */

				currentVirtualComponent = "talendMeter_FILE";

				currentComponent = "talendMeter_FILE";

				if (resourceMap.get("finish_talendMeter_FILE") == null) {

					java.io.Writer outtalendMeter_FILE = (java.io.Writer) resourceMap.get("out_talendMeter_FILE");
					if (outtalendMeter_FILE != null) {
						outtalendMeter_FILE.flush();
						outtalendMeter_FILE.close();
					}

				}

				/**
				 * [talendMeter_FILE finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("talendMeter_METTER_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final jOdsTypeClient jOdsTypeClientClass = new jOdsTypeClient();

		int exitCode = jOdsTypeClientClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = jOdsTypeClient.class.getClassLoader().getResourceAsStream(
					"icommerce_reporting/jodstypeclient_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = jOdsTypeClient.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("database", "id_String");
					context.database = (String) context.getProperty("database");
					context.setContextType("password", "id_Password");
					String pwd_password_value = context.getProperty("password");
					context.password = null;
					if (pwd_password_value != null) {
						if (context_param.containsKey("password")) {// no need to decrypt if it come from program
																	// argument or parent job runtime
							context.password = pwd_password_value;
						} else if (!pwd_password_value.isEmpty()) {
							try {
								context.password = routines.system.PasswordEncryptUtil
										.decryptPassword(pwd_password_value);
								context.put("password", context.password);
							} catch (java.lang.RuntimeException e) {
								// do nothing
							}
						}
					}
					context.setContextType("port", "id_String");
					context.port = (String) context.getProperty("port");
					context.setContextType("schema_params", "id_String");
					context.schema_params = (String) context.getProperty("schema_params");
					context.setContextType("utilisateur", "id_String");
					context.utilisateur = (String) context.getProperty("utilisateur");
					context.setContextType("servverName", "id_String");
					context.servverName = (String) context.getProperty("servverName");
					context.setContextType("additionalParam", "id_String");
					context.additionalParam = (String) context.getProperty("additionalParam");
					context.setContextType("schema_ods", "id_String");
					context.schema_ods = (String) context.getProperty("schema_ods");
					context.setContextType("masqueFichier_client", "id_String");
					context.masqueFichier_client = (String) context.getProperty("masqueFichier_client");
					context.setContextType("masqueFichier_typeClient", "id_String");
					context.masqueFichier_typeClient = (String) context.getProperty("masqueFichier_typeClient");
					context.setContextType("masqueFichier_sousCategorie", "id_String");
					context.masqueFichier_sousCategorie = (String) context.getProperty("masqueFichier_sousCategorie");
					context.setContextType("masqueFichier_categorie", "id_String");
					context.masqueFichier_categorie = (String) context.getProperty("masqueFichier_categorie");
					context.setContextType("masqueFichier_produit", "id_String");
					context.masqueFichier_produit = (String) context.getProperty("masqueFichier_produit");
					context.setContextType("masqueFichier_ventes", "id_String");
					context.masqueFichier_ventes = (String) context.getProperty("masqueFichier_ventes");
					context.setContextType("masqueFichier", "id_String");
					context.masqueFichier = (String) context.getProperty("masqueFichier");
					context.setContextType("fielSeparator", "id_String");
					context.fielSeparator = (String) context.getProperty("fielSeparator");
					context.setContextType("projectFolder", "id_Directory");
					context.projectFolder = (String) context.getProperty("projectFolder");
					context.setContextType("encodage", "id_String");
					context.encodage = (String) context.getProperty("encodage");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("database")) {
				context.database = (String) parentContextMap.get("database");
			}
			if (parentContextMap.containsKey("password")) {
				context.password = (java.lang.String) parentContextMap.get("password");
			}
			if (parentContextMap.containsKey("port")) {
				context.port = (String) parentContextMap.get("port");
			}
			if (parentContextMap.containsKey("schema_params")) {
				context.schema_params = (String) parentContextMap.get("schema_params");
			}
			if (parentContextMap.containsKey("utilisateur")) {
				context.utilisateur = (String) parentContextMap.get("utilisateur");
			}
			if (parentContextMap.containsKey("servverName")) {
				context.servverName = (String) parentContextMap.get("servverName");
			}
			if (parentContextMap.containsKey("additionalParam")) {
				context.additionalParam = (String) parentContextMap.get("additionalParam");
			}
			if (parentContextMap.containsKey("schema_ods")) {
				context.schema_ods = (String) parentContextMap.get("schema_ods");
			}
			if (parentContextMap.containsKey("masqueFichier_client")) {
				context.masqueFichier_client = (String) parentContextMap.get("masqueFichier_client");
			}
			if (parentContextMap.containsKey("masqueFichier_typeClient")) {
				context.masqueFichier_typeClient = (String) parentContextMap.get("masqueFichier_typeClient");
			}
			if (parentContextMap.containsKey("masqueFichier_sousCategorie")) {
				context.masqueFichier_sousCategorie = (String) parentContextMap.get("masqueFichier_sousCategorie");
			}
			if (parentContextMap.containsKey("masqueFichier_categorie")) {
				context.masqueFichier_categorie = (String) parentContextMap.get("masqueFichier_categorie");
			}
			if (parentContextMap.containsKey("masqueFichier_produit")) {
				context.masqueFichier_produit = (String) parentContextMap.get("masqueFichier_produit");
			}
			if (parentContextMap.containsKey("masqueFichier_ventes")) {
				context.masqueFichier_ventes = (String) parentContextMap.get("masqueFichier_ventes");
			}
			if (parentContextMap.containsKey("masqueFichier")) {
				context.masqueFichier = (String) parentContextMap.get("masqueFichier");
			}
			if (parentContextMap.containsKey("fielSeparator")) {
				context.fielSeparator = (String) parentContextMap.get("fielSeparator");
			}
			if (parentContextMap.containsKey("projectFolder")) {
				context.projectFolder = (String) parentContextMap.get("projectFolder");
			}
			if (parentContextMap.containsKey("encodage")) {
				context.encodage = (String) parentContextMap.get("encodage");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("password");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		talendStats_STATS.addMessage("begin");

		try {
			errorCode = null;
			Implicit_Context_DatabaseProcess(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_Implicit_Context_Database) {
			globalMap.put("Implicit_Context_Database_SUBPROCESS_STATE", -1);

			e_Implicit_Context_Database.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileList_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileList_1) {
			globalMap.put("tFileList_1_SUBPROCESS_STATE", -1);

			e_tFileList_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : jOdsTypeClient");
		}
		talendStats_STATS.addMessage(status == "" ? "end" : status, (end - startTime));
		try {
			talendStats_STATSProcess(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 349858 characters generated by Talend Open Studio for Data Integration on the
 * September 11, 2023 3:00:53 PM CEST
 ************************************************************************************************/